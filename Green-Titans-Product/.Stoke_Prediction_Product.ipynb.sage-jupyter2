{"backend_state":"running","connection_file":"/projects/65cfa0f0-7e13-4335-a821-03f129071bce/.local/share/jupyter/runtime/kernel-25d8aae9-4d04-4b3d-82d9-8329e63e33db.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657217501636,"exec_count":3,"id":"c974d7","input":"stroke_data.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>37132.980512</td>\n      <td>40.596497</td>\n      <td>0.068561</td>\n      <td>0.036394</td>\n      <td>91.503646</td>\n      <td>27.814299</td>\n      <td>0.031932</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>20978.055430</td>\n      <td>22.445165</td>\n      <td>0.252735</td>\n      <td>0.187289</td>\n      <td>22.703827</td>\n      <td>6.722199</td>\n      <td>0.175841</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>77.000000</td>\n      <td>0.080000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>55.120000</td>\n      <td>10.300000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>18682.000000</td>\n      <td>22.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>75.060000</td>\n      <td>23.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>37640.000000</td>\n      <td>41.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>88.050000</td>\n      <td>27.400000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>55363.000000</td>\n      <td>58.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>104.045000</td>\n      <td>32.100000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>72940.000000</td>\n      <td>82.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>168.150000</td>\n      <td>47.500000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                 id          age  hypertension  heart_disease  \\\ncount   4259.000000  4259.000000   4259.000000    4259.000000   \nmean   37132.980512    40.596497      0.068561       0.036394   \nstd    20978.055430    22.445165      0.252735       0.187289   \nmin       77.000000     0.080000      0.000000       0.000000   \n25%    18682.000000    22.000000      0.000000       0.000000   \n50%    37640.000000    41.000000      0.000000       0.000000   \n75%    55363.000000    58.000000      0.000000       0.000000   \nmax    72940.000000    82.000000      1.000000       1.000000   \n\n       avg_glucose_level          bmi       stroke  \ncount        4259.000000  4259.000000  4259.000000  \nmean           91.503646    27.814299     0.031932  \nstd            22.703827     6.722199     0.175841  \nmin            55.120000    10.300000     0.000000  \n25%            75.060000    23.000000     0.000000  \n50%            88.050000    27.400000     0.000000  \n75%           104.045000    32.100000     0.000000  \nmax           168.150000    47.500000     1.000000  "},"exec_count":3}},"pos":2,"start":1657217501554,"state":"done","type":"cell"}
{"cell_type":"code","end":1657217501662,"exec_count":4,"id":"248f64","input":"def pie():\n    global stroke_data\n    new_stroke_data = stroke_data.groupby('smoking_status').count()\n    options = list(new_stroke_data.index)\n    counts = []\n    for val in options:\n        counts.append(new_stroke_data[\"heart_disease\"][val])\n\n    new_fig = px.pie(new_stroke_data, values=counts, names=options, title=\"Percentage of Smokers\")\n    new_fig.show()\ndef scat():\n    global stroke_data\n    new_fig = px.scatter(stroke_data, x=\"age\", y=\"bmi\",color=\"avg_glucose_level\")\n    new_fig.show()\n\ndef smoke_hist():\n    global stroke_data\n    fig = px.histogram(stroke_data, x=\"smoking_status\", y=\"avg_glucose_level\", color='gender', barmode='group',height=400)\n    fig.show()","kernel":"ds_env","no_halt":true,"pos":6,"start":1657217501654,"state":"done","type":"cell"}
{"cell_type":"code","end":1657217502465,"exec_count":5,"id":"98d543","input":"pie()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"be9a0188b73df64f90dcf1cf33799c40b55b637f"}}},"pos":7,"start":1657217501680,"state":"done","type":"cell"}
{"cell_type":"code","end":1657217502713,"exec_count":6,"id":"59d39a","input":"scat()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"dc6928e798aaf8750e789a5e4edac71fd567fd02"}}},"pos":8,"start":1657217502481,"state":"done","type":"cell"}
{"cell_type":"code","end":1657217502942,"exec_count":7,"id":"1736e9","input":"smoke_hist()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"dff68173914ebcc9d2271bbe4c28f4396d12fce6"}}},"pos":9,"start":1657217502734,"state":"done","type":"cell"}
{"cell_type":"code","end":1657217503175,"exec_count":8,"id":"395139","input":"fig = px.scatter_matrix(stroke_data,\n    dimensions=[\"age\", \"avg_glucose_level\", \"bmi\"],\n    color=\"stroke\")\nfig.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"7e900395501185c4d5e4c40045c3111369ce4b6b"}}},"pos":10,"start":1657217502955,"state":"done","type":"cell"}
{"cell_type":"code","end":1657217503602,"exec_count":9,"id":"b503b6","input":"hd = pd.read_csv(\"./healthcare-dataset-stroke-data.csv\")\nhd.drop('id',inplace=True,axis=1)\nhd.dropna(inplace=True)\nhd.reset_index(drop=True, inplace=False)\nhd.drop([466, 544, 928, 1559, 2128, 2764, 2840, 3825, 4188, 4209, 4838, 270, 358])\nhd[\"heart_disease\"]=hd[\"heart_disease\"].replace([1],15)\nhd[\"heart_disease\"]=hd[\"heart_disease\"].replace([0],6)\nbmiAgeSexStrokePlot = px.scatter_3d(hd,y=hd[\"avg_glucose_level\"],x=hd[\"age\"], z=hd[\"bmi\"], symbol=\"ever_married\",labels=dict(stroke=\"Number of Strokes\",age=\"Age\",gender=\"Sex\", bmi=\"BMI\", heart_disease=\"If Heart Disease Present\", avg_glucose_level=\"Average Glucose Level\",smoking_status=\"If Smoke\"),color=\"stroke\",opacity=0.8,size=\"heart_disease\",size_max=20)\nbmiAgeSexStrokePlot.update_yaxes(tick0=1.0, dtick=1.0)\n#bmiAgeSexStrokePlot.update_traces(marker_size = 2.5)\nbmiAgeSexStrokePlot.update_xaxes(tick0=1, dtick=10)\nbmiAgeSexStrokePlot.update_layout(margin=dict(l=40, r=40, b=40, t=40))\n#Multidimensional plot that depicts most of the variables with the stats of the given person including marriage status.\n#Younger people typically have a lower glucose level\n#Higher glucose level, higher chance to get a stroke\n#Older, higher chance\n#Higher BMI, higher chance\n#Females typically have a lower glucose level","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"2f980d19dd38fdc8320d2711bbc8619d1f55cca7"}}},"pos":12,"start":1657217503201,"state":"done","type":"cell"}
{"cell_type":"code","end":1657219445222,"exec_count":69,"id":"3b5a52","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px","kernel":"ds_env","pos":0,"start":1657219445213,"state":"done","type":"cell"}
{"cell_type":"code","end":1657219446200,"exec_count":70,"id":"5db477","input":"stroke_data = pd.read_csv(\"healthcare-dataset-stroke-data.csv\")\n#hypertension = high blood pressure\nstroke_data.dropna(axis = 0, how = 'any', inplace = True)\nstroke_data.drop(stroke_data.index[stroke_data['gender'] == 'Other'], inplace = True)\n\nstroke_data1 = stroke_data.loc[stroke_data['avg_glucose_level'] <= 168.32]\nstroke_data = stroke_data1\nstroke_data.reset_index(drop = True, inplace = True)\n\nstroke_data2 = stroke_data.loc[stroke_data['bmi'] <= 47.5]\nstroke_data = stroke_data2\nstroke_data.reset_index(drop = True, inplace = True)\n\nstroke_data","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>31112</td>\n      <td>Male</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53882</td>\n      <td>Male</td>\n      <td>74.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>70.09</td>\n      <td>27.4</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10434</td>\n      <td>Female</td>\n      <td>69.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>94.39</td>\n      <td>22.8</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60491</td>\n      <td>Female</td>\n      <td>78.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>58.57</td>\n      <td>24.2</td>\n      <td>Unknown</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12109</td>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>80.43</td>\n      <td>29.7</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4254</th>\n      <td>14180</td>\n      <td>Female</td>\n      <td>13.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>children</td>\n      <td>Rural</td>\n      <td>103.08</td>\n      <td>18.6</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4255</th>\n      <td>44873</td>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Urban</td>\n      <td>125.20</td>\n      <td>40.0</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4256</th>\n      <td>19723</td>\n      <td>Female</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>82.99</td>\n      <td>30.6</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4257</th>\n      <td>37544</td>\n      <td>Male</td>\n      <td>51.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>166.29</td>\n      <td>25.6</td>\n      <td>formerly smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4258</th>\n      <td>44679</td>\n      <td>Female</td>\n      <td>44.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Govt_job</td>\n      <td>Urban</td>\n      <td>85.28</td>\n      <td>26.2</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>4259 rows × 12 columns</p>\n</div>","text/plain":"         id  gender   age  hypertension  heart_disease ever_married  \\\n0     31112    Male  80.0             0              1          Yes   \n1     53882    Male  74.0             1              1          Yes   \n2     10434  Female  69.0             0              0           No   \n3     60491  Female  78.0             0              0          Yes   \n4     12109  Female  81.0             1              0          Yes   \n...     ...     ...   ...           ...            ...          ...   \n4254  14180  Female  13.0             0              0           No   \n4255  44873  Female  81.0             0              0          Yes   \n4256  19723  Female  35.0             0              0          Yes   \n4257  37544    Male  51.0             0              0          Yes   \n4258  44679  Female  44.0             0              0          Yes   \n\n          work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n0           Private          Rural             105.92  32.5     never smoked   \n1           Private          Rural              70.09  27.4     never smoked   \n2           Private          Urban              94.39  22.8     never smoked   \n3           Private          Urban              58.57  24.2          Unknown   \n4           Private          Rural              80.43  29.7     never smoked   \n...             ...            ...                ...   ...              ...   \n4254       children          Rural             103.08  18.6          Unknown   \n4255  Self-employed          Urban             125.20  40.0     never smoked   \n4256  Self-employed          Rural              82.99  30.6     never smoked   \n4257        Private          Rural             166.29  25.6  formerly smoked   \n4258       Govt_job          Urban              85.28  26.2          Unknown   \n\n      stroke  \n0          1  \n1          1  \n2          1  \n3          1  \n4          1  \n...      ...  \n4254       0  \n4255       0  \n4256       0  \n4257       0  \n4258       0  \n\n[4259 rows x 12 columns]"},"exec_count":70}},"pos":1,"start":1657219446104,"state":"done","type":"cell"}
{"cell_type":"code","id":"025fe1","input":"","pos":3,"type":"cell"}
{"cell_type":"code","id":"71309f","input":"","pos":37,"type":"cell"}
{"cell_type":"code","id":"9057e3","input":"","pos":39,"type":"cell"}
{"cell_type":"code","id":"9f1831","input":"","pos":38,"type":"cell"}
{"cell_type":"code","id":"da14dd","input":"","pos":4,"type":"cell"}
{"cell_type":"markdown","id":"000d7d","input":"# Machine Learning Models","pos":13,"type":"cell"}
{"cell_type":"markdown","id":"0f2a57","input":"### working with dummies","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"106af6","input":"## Shawn (SVM)","pos":35,"type":"cell"}
{"cell_type":"markdown","id":"7ee12d","input":"## Alan (AdaBoost)","pos":40,"type":"cell"}
{"cell_type":"markdown","id":"99c7d3","input":"## Sophia (KNN)","pos":25,"type":"cell"}
{"cell_type":"markdown","id":"b9403f","input":"## Jeong (Logistic Regression)\n\n","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"ccd345","input":"## EDA - Exploratory Data Analysis\n\n","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"d250c1","input":"The older you are, the more likely you are to have a stroke. The higher you average glucose level is, the higher the stroke risk becomes. The higher your BMI is, the more likely you ate to have a stroke\n\nThe most dangerous combination is a high glucose level, and old age\n\nThe only data point that does not have any direct relation to strokes is age, although it does raise the chance for a person to get a stroke, when they are older\n","pos":11,"state":"done","type":"cell"}
{"end":1657218331330,"exec_count":34,"id":"1242a2","input":"stroke_data = pd.read_csv(\"healthcare-dataset-stroke-data.csv\")\n#hypertension = high blood pressure\nstroke_data.dropna(axis = 0, how = 'any', inplace = True)\nstroke_data.drop(stroke_data.index[stroke_data['gender'] == 'Other'], inplace = True)\n\nstroke_data1 = stroke_data.loc[stroke_data['avg_glucose_level'] <= 168.32]\nstroke_data = stroke_data1\nstroke_data.reset_index(drop = True, inplace = True)\n\nstroke_data2 = stroke_data.loc[stroke_data['bmi'] <= 47.5]\nstroke_data = stroke_data2\nstroke_data.reset_index(drop = True, inplace = True)\n\nstroke_data","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>31112</td>\n      <td>Male</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53882</td>\n      <td>Male</td>\n      <td>74.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>70.09</td>\n      <td>27.4</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10434</td>\n      <td>Female</td>\n      <td>69.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>94.39</td>\n      <td>22.8</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60491</td>\n      <td>Female</td>\n      <td>78.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>58.57</td>\n      <td>24.2</td>\n      <td>Unknown</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12109</td>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>80.43</td>\n      <td>29.7</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4254</th>\n      <td>14180</td>\n      <td>Female</td>\n      <td>13.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>children</td>\n      <td>Rural</td>\n      <td>103.08</td>\n      <td>18.6</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4255</th>\n      <td>44873</td>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Urban</td>\n      <td>125.20</td>\n      <td>40.0</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4256</th>\n      <td>19723</td>\n      <td>Female</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>82.99</td>\n      <td>30.6</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4257</th>\n      <td>37544</td>\n      <td>Male</td>\n      <td>51.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>166.29</td>\n      <td>25.6</td>\n      <td>formerly smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4258</th>\n      <td>44679</td>\n      <td>Female</td>\n      <td>44.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Govt_job</td>\n      <td>Urban</td>\n      <td>85.28</td>\n      <td>26.2</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>4259 rows × 12 columns</p>\n</div>","text/plain":"         id  gender   age  hypertension  heart_disease ever_married  \\\n0     31112    Male  80.0             0              1          Yes   \n1     53882    Male  74.0             1              1          Yes   \n2     10434  Female  69.0             0              0           No   \n3     60491  Female  78.0             0              0          Yes   \n4     12109  Female  81.0             1              0          Yes   \n...     ...     ...   ...           ...            ...          ...   \n4254  14180  Female  13.0             0              0           No   \n4255  44873  Female  81.0             0              0          Yes   \n4256  19723  Female  35.0             0              0          Yes   \n4257  37544    Male  51.0             0              0          Yes   \n4258  44679  Female  44.0             0              0          Yes   \n\n          work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n0           Private          Rural             105.92  32.5     never smoked   \n1           Private          Rural              70.09  27.4     never smoked   \n2           Private          Urban              94.39  22.8     never smoked   \n3           Private          Urban              58.57  24.2          Unknown   \n4           Private          Rural              80.43  29.7     never smoked   \n...             ...            ...                ...   ...              ...   \n4254       children          Rural             103.08  18.6          Unknown   \n4255  Self-employed          Urban             125.20  40.0     never smoked   \n4256  Self-employed          Rural              82.99  30.6     never smoked   \n4257        Private          Rural             166.29  25.6  formerly smoked   \n4258       Govt_job          Urban              85.28  26.2          Unknown   \n\n      stroke  \n0          1  \n1          1  \n2          1  \n3          1  \n4          1  \n...      ...  \n4254       0  \n4255       0  \n4256       0  \n4257       0  \n4258       0  \n\n[4259 rows x 12 columns]"},"exec_count":34}},"pos":26,"start":1657218331281,"state":"done","type":"cell"}
{"end":1657218334230,"exec_count":35,"id":"0dcd7a","input":"def twoVarDummy(column, newColumn):\n    dummyVar = pd.get_dummies(stroke_data[column])\n    dummyVar.head()\n    stroke_data[column] = dummyVar[dummyVar.columns[0]]","kernel":"ds_env","pos":27,"start":1657218334226,"state":"done","type":"cell"}
{"end":1657218337576,"exec_count":36,"id":"0e347b","input":"twoVarDummy('gender', 'sex')\ntwoVarDummy('ever_married', 'maritialStatus')\ntwoVarDummy('Residence_type', 'Residence')","kernel":"ds_env","pos":28,"start":1657218337462,"state":"done","type":"cell"}
{"end":1657218341175,"exec_count":37,"id":"f8d09a","input":"stroke_data.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>31112</td>\n      <td>0</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Private</td>\n      <td>1</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53882</td>\n      <td>0</td>\n      <td>74.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Private</td>\n      <td>1</td>\n      <td>70.09</td>\n      <td>27.4</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10434</td>\n      <td>1</td>\n      <td>69.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Private</td>\n      <td>0</td>\n      <td>94.39</td>\n      <td>22.8</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60491</td>\n      <td>1</td>\n      <td>78.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Private</td>\n      <td>0</td>\n      <td>58.57</td>\n      <td>24.2</td>\n      <td>Unknown</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12109</td>\n      <td>1</td>\n      <td>81.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Private</td>\n      <td>1</td>\n      <td>80.43</td>\n      <td>29.7</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id  gender   age  hypertension  heart_disease  ever_married work_type  \\\n0  31112       0  80.0             0              1             0   Private   \n1  53882       0  74.0             1              1             0   Private   \n2  10434       1  69.0             0              0             1   Private   \n3  60491       1  78.0             0              0             0   Private   \n4  12109       1  81.0             1              0             0   Private   \n\n   Residence_type  avg_glucose_level   bmi smoking_status  stroke  \n0               1             105.92  32.5   never smoked       1  \n1               1              70.09  27.4   never smoked       1  \n2               0              94.39  22.8   never smoked       1  \n3               0              58.57  24.2        Unknown       1  \n4               1              80.43  29.7   never smoked       1  "},"exec_count":37}},"pos":28.5,"start":1657218341132,"state":"done","type":"cell"}
{"end":1657218864385,"exec_count":42,"id":"4c46dd","input":"def multDummy(column):\n    dummiesMultVar = pd.get_dummies(stroke_data[column])\n    for i in range(0, len(dummiesMultVar)):\n        for j in range(0, len(dummiesMultVar.columns)-1):\n            colName = dummiesMultVar.columns[j]\n            colName0 = dummiesMultVar.columns[0]\n            if dummiesMultVar[colName][i] == 1:\n                dummiesMultVar[colName0][i] = j\n    print(dummiesMultVar.head())\n    stroke_data[column] = dummiesMultVar[colName0]","kernel":"ds_env","pos":29,"start":1657218864373,"state":"done","type":"cell"}
{"end":1657218868660,"exec_count":43,"id":"fe4196","input":"multDummy('smoking_status')\nmultDummy('work_type')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"   0  1  2\n0  0  0  1\n1  0  0  1\n2  0  0  1\n3  0  0  0\n4  0  0  1\n"},"1":{"name":"stdout","text":"   0  1  2  3\n0  2  0  1  0\n1  2  0  1  0\n2  2  0  1  0\n3  2  0  1  0\n4  2  0  1  0\n"}},"pos":29.5,"start":1657218867122,"state":"done","type":"cell"}
{"end":1657218873726,"exec_count":44,"id":"8af58b","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\ntarget = stroke_data['stroke']\ninput_columns = stroke_data.loc[:, stroke_data.columns != 'stroke']\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size = 0.2)","kernel":"ds_env","pos":30,"start":1657218873712,"state":"done","type":"cell"}
{"end":1657218877140,"exec_count":45,"id":"1fe5f3","input":"stroke_data.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>31112</td>\n      <td>0</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53882</td>\n      <td>0</td>\n      <td>74.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>70.09</td>\n      <td>27.4</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10434</td>\n      <td>1</td>\n      <td>69.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>94.39</td>\n      <td>22.8</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60491</td>\n      <td>1</td>\n      <td>78.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>58.57</td>\n      <td>24.2</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12109</td>\n      <td>1</td>\n      <td>81.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>80.43</td>\n      <td>29.7</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id  gender   age  hypertension  heart_disease  ever_married  work_type  \\\n0  31112       0  80.0             0              1             0          2   \n1  53882       0  74.0             1              1             0          2   \n2  10434       1  69.0             0              0             1          2   \n3  60491       1  78.0             0              0             0          2   \n4  12109       1  81.0             1              0             0          2   \n\n   Residence_type  avg_glucose_level   bmi  smoking_status  stroke  \n0               1             105.92  32.5               0       1  \n1               1              70.09  27.4               0       1  \n2               0              94.39  22.8               0       1  \n3               0              58.57  24.2               0       1  \n4               1              80.43  29.7               0       1  "},"exec_count":45}},"pos":30.5,"start":1657218877106,"state":"done","type":"cell"}
{"end":1657219362809,"exec_count":65,"id":"eecc6c","input":"dummies = pd.get_dummies(stroke_data[\"gender\"])\nstroke_data[\"gender_int\"] = dummies[\"Male\"]\n# stroke_data.drop(['id', 'gender', 'ever_married', 'work_type', 'Residence_type', 'smoking_status'], axis=1, inplace=True)\nstroke_data.drop(['id', 'gender', 'work_type', 'Residence_type', 'smoking_status'], axis=1, inplace=True)\ntarget = stroke_data['stroke']\ninput_c=stroke_data.loc[:,stroke_data.columns != \"stroke\"]","kernel":"ds_env","pos":20,"start":1657219362666,"state":"done","type":"cell"}
{"end":1657219368447,"exec_count":66,"id":"988391","input":"jx_train, jx_test, jy_train, jy_test = train_test_split(input_c, target, test_size=0.8, random_state=101)\n\nsmote = SMOTE(random_state = 101)\njx_oversample, jy_oversample = smote.fit_resample(jx_train, jy_train)\n\nparameters = {\n    'penalty' : ['none','l1','l2'],\n    'C'       : np.logspace(-3,3,7),\n    'solver'  : ['newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga']\n}\nlogreg = LogisticRegression(max_iter=1200)\ngrid_search = GridSearchCV(estimator = logreg,\n                           param_grid = parameters,\n                           scoring = 'accuracy',\n                           cv=10)\n\ngrid_search.fit(jx_oversample,jy_oversample)\njy_pred=grid_search.predict(jx_test)\n\nprint(\"Tuned Hyperparameters :\", grid_search.best_params_)\nprint(\"Accuracy :\",grid_search.best_score_)\n\ntotal_squared_error = (np.sum((jy_test - jy_pred)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(jy_test) #divide this by how many rows/observations we have \nprint(mean_squared_error)\n\nsns.heatmap(confusion_matrix(jy_test, jy_pred), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"ename":"ValueError","evalue":"could not convert string to float: 'No'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","Input \u001b[0;32mIn [66]\u001b[0m, in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m jx_train, jx_test, jy_train, jy_test \u001b[38;5;241m=\u001b[39m train_test_split(input_c, target, test_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m0.8\u001b[39m, random_state\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m101\u001b[39m)\n\u001b[1;32m      3\u001b[0m smote \u001b[38;5;241m=\u001b[39m SMOTE(random_state \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m101\u001b[39m)\n\u001b[0;32m----> 4\u001b[0m jx_oversample, jy_oversample \u001b[38;5;241m=\u001b[39m \u001b[43msmote\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfit_resample\u001b[49m\u001b[43m(\u001b[49m\u001b[43mjx_train\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mjy_train\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      6\u001b[0m parameters \u001b[38;5;241m=\u001b[39m {\n\u001b[1;32m      7\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mpenalty\u001b[39m\u001b[38;5;124m'\u001b[39m : [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnone\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124ml1\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124ml2\u001b[39m\u001b[38;5;124m'\u001b[39m],\n\u001b[1;32m      8\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mC\u001b[39m\u001b[38;5;124m'\u001b[39m       : np\u001b[38;5;241m.\u001b[39mlogspace(\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m3\u001b[39m,\u001b[38;5;241m3\u001b[39m,\u001b[38;5;241m7\u001b[39m),\n\u001b[1;32m      9\u001b[0m     \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msolver\u001b[39m\u001b[38;5;124m'\u001b[39m  : [\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mnewton-cg\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlbfgs\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mliblinear\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msag\u001b[39m\u001b[38;5;124m'\u001b[39m, \u001b[38;5;124m'\u001b[39m\u001b[38;5;124msaga\u001b[39m\u001b[38;5;124m'\u001b[39m]\n\u001b[1;32m     10\u001b[0m }\n\u001b[1;32m     11\u001b[0m logreg \u001b[38;5;241m=\u001b[39m LogisticRegression(max_iter\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1200\u001b[39m)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/imblearn/base.py:77\u001b[0m, in \u001b[0;36mSamplerMixin.fit_resample\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m     75\u001b[0m check_classification_targets(y)\n\u001b[1;32m     76\u001b[0m arrays_transformer \u001b[38;5;241m=\u001b[39m ArraysTransformer(X, y)\n\u001b[0;32m---> 77\u001b[0m X, y, binarize_y \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_check_X_y\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     79\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msampling_strategy_ \u001b[38;5;241m=\u001b[39m check_sampling_strategy(\n\u001b[1;32m     80\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39msampling_strategy, y, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_sampling_type\n\u001b[1;32m     81\u001b[0m )\n\u001b[1;32m     83\u001b[0m output \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_fit_resample(X, y)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/imblearn/base.py:132\u001b[0m, in \u001b[0;36mBaseSampler._check_X_y\u001b[0;34m(self, X, y, accept_sparse)\u001b[0m\n\u001b[1;32m    130\u001b[0m     accept_sparse \u001b[38;5;241m=\u001b[39m [\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcsr\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcsc\u001b[39m\u001b[38;5;124m\"\u001b[39m]\n\u001b[1;32m    131\u001b[0m y, binarize_y \u001b[38;5;241m=\u001b[39m check_target_type(y, indicate_one_vs_all\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m--> 132\u001b[0m X, y \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_validate_data\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreset\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maccept_sparse\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    133\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m X, y, binarize_y\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/base.py:596\u001b[0m, in \u001b[0;36mBaseEstimator._validate_data\u001b[0;34m(self, X, y, reset, validate_separately, **check_params)\u001b[0m\n\u001b[1;32m    594\u001b[0m         y \u001b[38;5;241m=\u001b[39m check_array(y, input_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124my\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mcheck_y_params)\n\u001b[1;32m    595\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 596\u001b[0m         X, y \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_X_y\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43my\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mcheck_params\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    597\u001b[0m     out \u001b[38;5;241m=\u001b[39m X, y\n\u001b[1;32m    599\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m no_val_X \u001b[38;5;129;01mand\u001b[39;00m check_params\u001b[38;5;241m.\u001b[39mget(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mensure_2d\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m):\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/validation.py:1074\u001b[0m, in \u001b[0;36mcheck_X_y\u001b[0;34m(X, y, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, multi_output, ensure_min_samples, ensure_min_features, y_numeric, estimator)\u001b[0m\n\u001b[1;32m   1069\u001b[0m         estimator_name \u001b[38;5;241m=\u001b[39m _check_estimator_name(estimator)\n\u001b[1;32m   1070\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m   1071\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mestimator_name\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m requires y to be passed, but the target y is None\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m   1072\u001b[0m     )\n\u001b[0;32m-> 1074\u001b[0m X \u001b[38;5;241m=\u001b[39m \u001b[43mcheck_array\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m   1075\u001b[0m \u001b[43m    \u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1076\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccept_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maccept_sparse\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1077\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccept_large_sparse\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43maccept_large_sparse\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1078\u001b[0m \u001b[43m    \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1079\u001b[0m \u001b[43m    \u001b[49m\u001b[43morder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43morder\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1080\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcopy\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mcopy\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1081\u001b[0m \u001b[43m    \u001b[49m\u001b[43mforce_all_finite\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mforce_all_finite\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1082\u001b[0m \u001b[43m    \u001b[49m\u001b[43mensure_2d\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mensure_2d\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1083\u001b[0m \u001b[43m    \u001b[49m\u001b[43mallow_nd\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mallow_nd\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1084\u001b[0m \u001b[43m    \u001b[49m\u001b[43mensure_min_samples\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mensure_min_samples\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1085\u001b[0m \u001b[43m    \u001b[49m\u001b[43mensure_min_features\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mensure_min_features\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1086\u001b[0m \u001b[43m    \u001b[49m\u001b[43mestimator\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mestimator\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1087\u001b[0m \u001b[43m    \u001b[49m\u001b[43minput_name\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mX\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[1;32m   1088\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   1090\u001b[0m y \u001b[38;5;241m=\u001b[39m _check_y(y, multi_output\u001b[38;5;241m=\u001b[39mmulti_output, y_numeric\u001b[38;5;241m=\u001b[39my_numeric, estimator\u001b[38;5;241m=\u001b[39mestimator)\n\u001b[1;32m   1092\u001b[0m check_consistent_length(X, y)\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/sklearn/utils/validation.py:856\u001b[0m, in \u001b[0;36mcheck_array\u001b[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)\u001b[0m\n\u001b[1;32m    854\u001b[0m         array \u001b[38;5;241m=\u001b[39m array\u001b[38;5;241m.\u001b[39mastype(dtype, casting\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124munsafe\u001b[39m\u001b[38;5;124m\"\u001b[39m, copy\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m    855\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 856\u001b[0m         array \u001b[38;5;241m=\u001b[39m \u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43masarray\u001b[49m\u001b[43m(\u001b[49m\u001b[43marray\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43morder\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43morder\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    857\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m ComplexWarning \u001b[38;5;28;01mas\u001b[39;00m complex_warning:\n\u001b[1;32m    858\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    859\u001b[0m         \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mComplex data not supported\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(array)\n\u001b[1;32m    860\u001b[0m     ) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcomplex_warning\u001b[39;00m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/generic.py:2064\u001b[0m, in \u001b[0;36mNDFrame.__array__\u001b[0;34m(self, dtype)\u001b[0m\n\u001b[1;32m   2063\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__array__\u001b[39m(\u001b[38;5;28mself\u001b[39m, dtype: npt\u001b[38;5;241m.\u001b[39mDTypeLike \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m np\u001b[38;5;241m.\u001b[39mndarray:\n\u001b[0;32m-> 2064\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43masarray\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_values\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mdtype\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: 'No'"]}},"pos":21,"start":1657219368299,"state":"done","type":"cell"}
{"end":1657219429813,"exec_count":67,"id":"95c171","input":"from sklearn.neighbors import KNeighborsClassifier as KNN\nk = 5\nmy_KNN_model = KNN(n_neighbors = k)\nmy_KNN_model.fit(x_train, y_train)\ny_pred = my_KNN_model.predict(x_test)","kernel":"ds_env","pos":31,"start":1657219429690,"state":"done","type":"cell"}
{"end":1657219458044,"exec_count":71,"id":"b4f78a","input":"stroke_data.head()","kernel":"ds_env","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>31112</td>\n      <td>Male</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53882</td>\n      <td>Male</td>\n      <td>74.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>70.09</td>\n      <td>27.4</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10434</td>\n      <td>Female</td>\n      <td>69.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>94.39</td>\n      <td>22.8</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60491</td>\n      <td>Female</td>\n      <td>78.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>58.57</td>\n      <td>24.2</td>\n      <td>Unknown</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12109</td>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>80.43</td>\n      <td>29.7</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      id  gender   age  hypertension  heart_disease ever_married work_type  \\\n0  31112    Male  80.0             0              1          Yes   Private   \n1  53882    Male  74.0             1              1          Yes   Private   \n2  10434  Female  69.0             0              0           No   Private   \n3  60491  Female  78.0             0              0          Yes   Private   \n4  12109  Female  81.0             1              0          Yes   Private   \n\n  Residence_type  avg_glucose_level   bmi smoking_status  stroke  \n0          Rural             105.92  32.5   never smoked       1  \n1          Rural              70.09  27.4   never smoked       1  \n2          Urban              94.39  22.8   never smoked       1  \n3          Urban              58.57  24.2        Unknown       1  \n4          Rural              80.43  29.7   never smoked       1  "},"exec_count":71}},"pos":18,"start":1657219458019,"state":"done","type":"cell"}
{"end":1657219459635,"exec_count":72,"id":"aab5f5","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom imblearn.over_sampling import SMOTE\nfrom sklearn.model_selection import GridSearchCV\nimport warnings\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\n\nwarnings.filterwarnings('ignore')","kernel":"ds_env","pos":19,"start":1657219459626,"state":"done","type":"cell"}
{"end":1657219863716,"exec_count":73,"id":"44cc22","input":"from imblearn.over_sampling import SMOTE\nfrom collections import Counter\ncounter = Counter(y_train)\nprint('Before', counter)\nsmt = SMOTE()\nx_train_sm, y_train_sm = smt.fit_resample(x_train, y_train)\n\ncounter = Counter(y_train_sm)\nprint('After', counter)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"Before Counter({0: 3300, 1: 107})\nAfter Counter({0: 3300, 1: 3300})\n"}},"pos":32,"start":1657219863701,"state":"done","type":"cell"}
{"end":1657219866559,"exec_count":74,"id":"c36e1e","input":"knn2 = KNN(n_neighbors = 1, weights = 'uniform', algorithm = 'brute', metric = 'manhattan')\nknn2.fit(x_train_sm, y_train_sm)\ny_pred2 = knn2.predict(x_test)\ntotal_squared_error = (np.sum((y_test - y_pred2)**2))\nmean_squared_error = total_squared_error/len(y_pred2)\nprint(mean_squared_error)\nkNN_MSE = mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_pred2), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.3333333333333333\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":74},"2":{"data":{"image/png":"5d33b687a35f25e7d750e4645baeeb8a4db501b5","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":33,"start":1657219866018,"state":"done","type":"cell"}
{"end":1657220402958,"exec_count":75,"id":"8d125c","input":"sd = pd.read_csv(\"healthcare-dataset-stroke-data.csv\")\n#hypertension = high blood pressure\nsd.dropna(axis = 0, how = 'any', inplace = True)\nsd.drop(sd.index[sd['gender'] == 'Other'], inplace = True)\n\nsd1 = sd.loc[sd['avg_glucose_level'] <= 168.32]\nsd = sd1\nsd.reset_index(drop = True, inplace = True)\n\nsd2 = sd.loc[sd['bmi'] <= 47.5]\nsd = sd2\nsd.reset_index(drop = True, inplace = True)\n\nsd.drop('id',inplace=True,axis=1)\n\ngenderdummy = pd.get_dummies(sd[\"gender\"])\nsd[\"gender_type\"] = genderdummy[\"Male\"]\nmarrydummy = pd.get_dummies(sd[\"ever_married\"])\nsd[\"married\"] = marrydummy[\"Yes\"]\nreddummy = pd.get_dummies(sd[\"Residence_type\"])\nsd[\"if_live_in_city\"] = reddummy[\"Urban\"]\nsmokedummy = pd.get_dummies(sd[\"smoking_status\"])\nsd[\"never_smoke\"] = smokedummy[\"never smoked\"]\n\nsd.drop(['gender','ever_married','Residence_type',\"smoking_status\",\"work_type\"],axis=1,inplace=True)","kernel":"ds_env","pos":40.5,"start":1657220402775,"state":"done","type":"cell"}
{"end":1657220406213,"exec_count":76,"id":"c46a6d","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nfrom imblearn.under_sampling import RandomUnderSampler\ntarget = sd[\"stroke\"]\ninput_c=sd.loc[:, sd.columns != \"stroke\"]\nx_traina, x_testa, y_traina, y_testa = train_test_split(input_c, target, test_size=0.75)","kernel":"ds_env","pos":41,"start":1657220406204,"state":"done","type":"cell"}
{"end":1657220570565,"exec_count":83,"id":"33bf3e","input":"oversample = SMOTE(sampling_strategy=0.1)\nunder = RandomUnderSampler(sampling_strategy=0.5)\nx_traina, y_traina = oversample.fit_resample(x_traina,y_traina)\nx_traina, y_traina = under.fit_resample(x_traina,y_traina)\nx_testa, y_testa = oversample.fit_resample(x_testa,y_testa)\nx_testa, y_testa = under.fit_resample(x_testa,y_testa)","kernel":"ds_env","pos":42,"start":1657220570537,"state":"done","type":"cell"}
{"end":1657220576874,"exec_count":84,"id":"34e91a","input":"from sklearn.ensemble import AdaBoostClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom numpy import mean\nfrom numpy import std\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nbase = DecisionTreeClassifier(max_depth = 6)\nclada = AdaBoostClassifier(n_estimators = 100, base_estimator = base, learning_rate = 1.3)\nclada.fit(x_traina,y_traina)\ny_hata = clada.predict(x_testa)\ntotal_squared_error = (np.sum((y_testa - y_hata)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_testa) #divide this by how many rows/observations we have \nprint(mean_squared_error)","kernel":"ds_env","output":{"0":{"name":"stdout","text":"0.27292340884573896\n"}},"pos":43,"start":1657220576608,"state":"done","type":"cell"}
{"end":1657220582238,"exec_count":85,"id":"3c0cd4","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_testa, y_hata), annot=True, fmt='g')","kernel":"ds_env","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":85},"1":{"data":{"image/png":"7133153ddac7eaa4944afb073800aecaa7639fc1","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":44,"start":1657220582012,"state":"done","type":"cell"}
{"exec_count":18,"id":"7a67e4","input":"def svmModel():\n    import sklearn\n    from sklearn.model_selection import train_test_split\n    from imblearn.over_sampling import SMOTE\n    ssx_train, ssx_test, ssy_train, ssy_test = train_test_split(input_columns, target, test_size=0.2, random_state=101)\n    smote = SMOTE(random_state = 101)\n    ssx_oversample, ssy_oversample = smote.fit_resample(ssx_train, ssy_train)\n    ssx_test2, ssy_test2 = smote.fit_resample(ssx_test, ssy_test)\n    from sklearn import svm\n    clf = svm.SVC(kernel = 'linear').fit(ssx_oversample, ssy_oversample)\n    from sklearn.model_selection import GridSearchCV\n    from sklearn.svm import SVC\n    param_grid = {'C': [0.1, 1, 10, 100, 1000],\n                  'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n                  'kernel': ['rbf']}\n    grid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3, return_train_score=False)\n    grid.fit(ssx_oversample, ssy_oversample)\n    print(grid.best_params_)\n    print(grid.best_estimator_)\n    print(grid.best_score_)\n    from sklearn.metrics import classification_report, confusion_matrix\n    grid_predictions = grid.predict(ssx_test2)\n    print(classification_report(ssy_test2, grid_predictions))","kernel":"ds_env","pos":36,"state":"done","type":"cell"}
{"id":"23e410","input":"","pos":15,"type":"cell"}
{"id":"2d5a1b","input":"","pos":0.5,"type":"cell"}
{"id":"341363","input":"","pos":23,"type":"cell"}
{"id":"36bccb","input":"","pos":22,"type":"cell"}
{"id":"525f8f","input":"","pos":45,"type":"cell"}
{"id":"52762e","input":"","pos":20.5,"type":"cell"}
{"id":"a89333","input":"","pos":16,"type":"cell"}
{"id":"e39817","input":"","pos":34,"type":"cell"}
{"id":"f1e987","input":"","pos":24,"type":"cell"}
{"id":0,"time":1657217948245,"type":"user"}
{"last_load":1657203097689,"type":"file"}