{"backend_state":"init","connection_file":"/projects/65cfa0f0-7e13-4335-a821-03f129071bce/.local/share/jupyter/runtime/kernel-58cb73bf-68f6-4536-be85-3aa317a26ab5.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"5ddc36","input":"","pos":40,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"63ab58","input":"","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"9998d4","input":"","pos":57,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"a9d0d9","input":"","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"d97587","input":"","pos":58,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"dbcfb8","input":"","pos":45,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"fbe5d1","input":"","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"8d7ffd","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"f20bf8","input":"#X and Y (x = variables, y = stroke or not)\n#Scaling?","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"9b913d","input":"def twoVarDummy(column, newColumn):\n    dummyVar = pd.get_dummies(stroke_data[column])\n    dummyVar.head()\n    stroke_data[column] = dummyVar[dummyVar.columns[0]]","pos":14,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"444bd5","input":"twoVarDummy('gender', 'sex')\ntwoVarDummy('ever_married', 'maritialStatus')\ntwoVarDummy('Residence_type', 'Residence')","output":{"0":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_5760/879011250.py:4: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"6a485e","input":"def multDummy(column):\n    dummiesMultVar = pd.get_dummies(stroke_data[column])\n    for i in range(0, len(dummiesMultVar)):\n        for j in range(0, len(dummiesMultVar.columns)-1):\n            colName = dummiesMultVar.columns[j]\n            colName0 = dummiesMultVar.columns[0]\n            if dummiesMultVar[colName][i] == 1:\n                dummiesMultVar[colName0][i] = j\n    print(dummiesMultVar.head())\n    stroke_data[column] = dummiesMultVar[colName0]","pos":17,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"2fa6c5","input":"multDummy('smoking_status')","output":{"0":{"name":"stdout","output_type":"stream","text":"   Unknown  formerly smoked  never smoked  smokes\n0        2                0             1       0\n1        2                0             1       0\n2        2                0             1       0\n3        0                0             0       0\n4        2                0             1       0\n"},"1":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_5760/2613986386.py:10: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"603289","input":"multDummy('work_type')","output":{"0":{"name":"stdout","output_type":"stream","text":"   Govt_job  Never_worked  Private  Self-employed  children\n0         2             0        1              0         0\n1         2             0        1              0         0\n2         2             0        1              0         0\n3         2             0        1              0         0\n4         2             0        1              0         0\n"},"1":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_5760/2613986386.py:10: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n"}},"pos":19,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"1185d3","input":"stroke_data.tail()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4254</th>\n      <td>1</td>\n      <td>13.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>103.08</td>\n      <td>18.6</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4255</th>\n      <td>1</td>\n      <td>81.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>125.20</td>\n      <td>40.0</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4256</th>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>82.99</td>\n      <td>30.6</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4257</th>\n      <td>0</td>\n      <td>51.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>166.29</td>\n      <td>25.6</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4258</th>\n      <td>1</td>\n      <td>44.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>85.28</td>\n      <td>26.2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"      gender   age  hypertension  heart_disease  ever_married  work_type  \\\n4254       1  13.0             0              0             1          0   \n4255       1  81.0             0              0             0          3   \n4256       1  35.0             0              0             0          3   \n4257       0  51.0             0              0             0          2   \n4258       1  44.0             0              0             0          0   \n\n      Residence_type  avg_glucose_level   bmi  smoking_status  stroke  \n4254               1             103.08  18.6               0       0  \n4255               0             125.20  40.0               2       0  \n4256               1              82.99  30.6               2       0  \n4257               1             166.29  25.6               1       0  \n4258               0              85.28  26.2               0       0  "},"exec_count":16,"output_type":"execute_result"}},"pos":20,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"9b0bb3","input":"#Machine learning set-up (NEED THIS for every model)","pos":21,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"4b5bf3","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\ntarget = stroke_data['stroke']\ninput_columns = stroke_data.loc[:, stroke_data.columns != 'stroke']\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size = 0.8)","pos":22,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"7ae0be","input":"#KNN original (no modifications) -> only need the import for future KNNs","pos":23,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"2c0713","input":"stroke_data = pd.read_csv(\"healthcare-dataset-stroke-data.csv\")\n#hypertension = high blood pressure\nstroke_data.dropna(axis = 0, how = 'any', inplace = True)\nstroke_data.drop(stroke_data.index[stroke_data['gender'] == 'Other'], inplace = True)\nstroke_data.drop('id', axis = 1, inplace = True)\n\nstroke_data1 = stroke_data.loc[stroke_data['avg_glucose_level'] <= 168.32]\nstroke_data = stroke_data1\nstroke_data.reset_index(drop = True, inplace = True)\n\nstroke_data2 = stroke_data.loc[stroke_data['bmi'] <= 47.5]\nstroke_data = stroke_data2\nstroke_data.reset_index(drop = True, inplace = True)\n\nstroke_data","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Male</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Male</td>\n      <td>74.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>70.09</td>\n      <td>27.4</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Female</td>\n      <td>69.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>94.39</td>\n      <td>22.8</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Female</td>\n      <td>78.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>58.57</td>\n      <td>24.2</td>\n      <td>Unknown</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>80.43</td>\n      <td>29.7</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4254</th>\n      <td>Female</td>\n      <td>13.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>children</td>\n      <td>Rural</td>\n      <td>103.08</td>\n      <td>18.6</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4255</th>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Urban</td>\n      <td>125.20</td>\n      <td>40.0</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4256</th>\n      <td>Female</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>82.99</td>\n      <td>30.6</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4257</th>\n      <td>Male</td>\n      <td>51.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>166.29</td>\n      <td>25.6</td>\n      <td>formerly smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4258</th>\n      <td>Female</td>\n      <td>44.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Govt_job</td>\n      <td>Urban</td>\n      <td>85.28</td>\n      <td>26.2</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>4259 rows × 11 columns</p>\n</div>","text/plain":"      gender   age  hypertension  heart_disease ever_married      work_type  \\\n0       Male  80.0             0              1          Yes        Private   \n1       Male  74.0             1              1          Yes        Private   \n2     Female  69.0             0              0           No        Private   \n3     Female  78.0             0              0          Yes        Private   \n4     Female  81.0             1              0          Yes        Private   \n...      ...   ...           ...            ...          ...            ...   \n4254  Female  13.0             0              0           No       children   \n4255  Female  81.0             0              0          Yes  Self-employed   \n4256  Female  35.0             0              0          Yes  Self-employed   \n4257    Male  51.0             0              0          Yes        Private   \n4258  Female  44.0             0              0          Yes       Govt_job   \n\n     Residence_type  avg_glucose_level   bmi   smoking_status  stroke  \n0             Rural             105.92  32.5     never smoked       1  \n1             Rural              70.09  27.4     never smoked       1  \n2             Urban              94.39  22.8     never smoked       1  \n3             Urban              58.57  24.2          Unknown       1  \n4             Rural              80.43  29.7     never smoked       1  \n...             ...                ...   ...              ...     ...  \n4254          Rural             103.08  18.6          Unknown       0  \n4255          Urban             125.20  40.0     never smoked       0  \n4256          Rural              82.99  30.6     never smoked       0  \n4257          Rural             166.29  25.6  formerly smoked       0  \n4258          Urban              85.28  26.2          Unknown       0  \n\n[4259 rows x 11 columns]"},"exec_count":2,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"272a4c","input":"from sklearn.neighbors import KNeighborsClassifier as KNN\nk = 5\nmy_KNN_model = KNN(n_neighbors = k)\nmy_KNN_model.fit(x_train, y_train)\ny_pred = my_KNN_model.predict(x_test)","pos":24,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"74a085","input":"total_squared_error = (np.sum((y_test - y_pred)**2))\nmean_squared_error = total_squared_error/len(y_pred)\nprint(mean_squared_error)\nkNN_MSE = mean_squared_error","output":{"0":{"name":"stdout","output_type":"stream","text":"0.03433098591549296\n"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"bad5f6","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":22,"output_type":"execute_result"},"1":{"data":{"image/png":"9079f0c33157cd7b7fd43f718ec6edfe035b4f18","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":22,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"77908a","input":"#min k calculations\nimport matplotlib.pyplot as plt\nerror_rate = []\nfor i in range(1,40):\n knn = KNN(n_neighbors=i)\n knn.fit(x_train,y_train)\n pred_i = knn.predict(x_test)\n error_rate.append(np.mean(pred_i != y_test))\n\nplt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', \n         marker='o',markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\nprint(\"Minimum error:-\",min(error_rate),\"at K =\",error_rate.index(min(error_rate)))","output":{"0":{"name":"stdout","output_type":"stream","text":"Minimum error:- 0.03198356807511737 at K = 5\n"},"1":{"data":{"image/png":"7cb58e55fbb0c6e2beccaea91edfce785423fc76","text/plain":"<Figure size 720x432 with 1 Axes>"},"exec_count":23,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"532720","input":"from imblearn.over_sampling import SMOTE\nfrom collections import Counter\ncounter = Counter(y_train)\nprint('Before', counter)\nsmt = SMOTE()\nx_train_sm, y_train_sm = smt.fit_resample(x_train, y_train)\n\ncounter = Counter(y_train_sm)\nprint('After', counter)","output":{"0":{"name":"stdout","output_type":"stream","text":"Before Counter({0: 824, 1: 27})\nAfter Counter({0: 824, 1: 824})\n"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":25,"id":"f49e03","input":"#KNN after using SMOTE\nmy_KNN_model.fit(x_train_sm, y_train_sm)\ny_pred = my_KNN_model.predict(x_test)\ntotal_squared_error = (np.sum((y_test - y_pred)**2))\nmean_squared_error = total_squared_error/len(y_pred)\nprint(mean_squared_error)\nkNN_MSE = mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='g')","output":{"0":{"name":"stdout","output_type":"stream","text":"0.16314553990610328\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":25,"output_type":"execute_result"},"2":{"data":{"image/png":"5f13966fcf3b3ea9046ff7f30165130eb7384b96","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":25,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":29,"type":"cell"}
{"cell_type":"code","exec_count":26,"id":"ebc58b","input":"#Hyperparameter tuning (KNN)","pos":30,"type":"cell"}
{"cell_type":"code","exec_count":27,"id":"81b709","input":"from sklearn.model_selection import GridSearchCV","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":28,"id":"294dce","input":"grid_params = { 'n_neighbors' : [1, 5,7,9,11,13,15],\n               'weights' : ['uniform','distance'],\n               'algorithm' : ['brute', 'kd_tree', 'ball_tree'],\n               'metric' : ['minkowski','euclidean','manhattan']}","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":29,"id":"1244b7","input":"gs = GridSearchCV(KNN(), grid_params, verbose = 1, cv=3, n_jobs = -1)","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"c560f6","input":"stroke_data.describe()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>40.596497</td>\n      <td>0.068561</td>\n      <td>0.036394</td>\n      <td>91.503646</td>\n      <td>27.814299</td>\n      <td>0.031932</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>22.445165</td>\n      <td>0.252735</td>\n      <td>0.187289</td>\n      <td>22.703827</td>\n      <td>6.722199</td>\n      <td>0.175841</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.080000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>55.120000</td>\n      <td>10.300000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>22.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>75.060000</td>\n      <td>23.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>41.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>88.050000</td>\n      <td>27.400000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>58.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>104.045000</td>\n      <td>32.100000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>82.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>168.150000</td>\n      <td>47.500000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               age  hypertension  heart_disease  avg_glucose_level  \\\ncount  4259.000000   4259.000000    4259.000000        4259.000000   \nmean     40.596497      0.068561       0.036394          91.503646   \nstd      22.445165      0.252735       0.187289          22.703827   \nmin       0.080000      0.000000       0.000000          55.120000   \n25%      22.000000      0.000000       0.000000          75.060000   \n50%      41.000000      0.000000       0.000000          88.050000   \n75%      58.000000      0.000000       0.000000         104.045000   \nmax      82.000000      1.000000       1.000000         168.150000   \n\n               bmi       stroke  \ncount  4259.000000  4259.000000  \nmean     27.814299     0.031932  \nstd       6.722199     0.175841  \nmin      10.300000     0.000000  \n25%      23.000000     0.000000  \n50%      27.400000     0.000000  \n75%      32.100000     0.000000  \nmax      47.500000     1.000000  "},"exec_count":3,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":30,"id":"1ebb15","input":"g_res = gs.fit(x_train_sm, y_train_sm)","output":{"0":{"name":"stdout","output_type":"stream","text":"Fitting 3 folds for each of 126 candidates, totalling 378 fits\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":31,"id":"9a0e96","input":"g_res.best_score_","output":{"0":{"data":{"text/plain":"0.9375150411215986"},"exec_count":31,"output_type":"execute_result"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":32,"id":"458076","input":"g_res.best_params_","output":{"0":{"data":{"text/plain":"{'algorithm': 'brute',\n 'metric': 'manhattan',\n 'n_neighbors': 1,\n 'weights': 'uniform'}"},"exec_count":32,"output_type":"execute_result"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":33,"id":"dc4335","input":"#Testing tuning (Most accurate KNN model as of right now)","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":34,"id":"97e4bd","input":"knn2 = KNN(n_neighbors = 1, weights = 'uniform', algorithm = 'brute', metric = 'manhattan')\nknn2.fit(x_train_sm, y_train_sm)\ny_pred2 = knn2.predict(x_test)\ntotal_squared_error = (np.sum((y_test - y_pred2)**2))\nmean_squared_error = total_squared_error/len(y_pred2)\nprint(mean_squared_error)\nkNN_MSE = mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_pred2), annot=True, fmt='g')","output":{"0":{"name":"stdout","output_type":"stream","text":"0.11326291079812206\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":34,"output_type":"execute_result"},"2":{"data":{"image/png":"da95aca808f664e4222e5bca6474fef6e5cb0a9b","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":34,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"851399","input":"#Bagging model (with modified data but without GridSearch)","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"35f2bb","input":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\nbag_model = BaggingClassifier(base_estimator=DecisionTreeClassifier(), n_estimators=100, max_samples=0.8, bootstrap=True, oob_score=True, random_state=0)","pos":47,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"08ae64","input":"def pie():\n    global stroke_data\n    new_stroke_data = stroke_data.groupby('smoking_status').count()\n    options = list(new_stroke_data.index)\n    counts = []\n    for val in options:\n        counts.append(new_stroke_data[\"heart_disease\"][val])\n\n    new_fig = px.pie(new_stroke_data, values=counts, names=options, title=\"Percentage of Smokers\")\n    new_fig.show()\ndef scat():\n    global stroke_data\n    new_fig = px.scatter(stroke_data, x=\"age\", y=\"bmi\",color=\"avg_glucose_level\")\n    new_fig.show()\n\ndef smoke_hist():\n    global stroke_data\n    fig = px.histogram(stroke_data, x=\"smoking_status\", y=\"avg_glucose_level\", color='gender', barmode='group',height=400)\n    fig.show()","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"81281c","input":"bag_model.fit(x_train_sm, y_train_sm)\nbag_model.oob_score_\ny_pred3 = bag_model.predict(x_test)","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"2111fa","input":"total_squared_error = (np.sum((y_test - y_pred3)**2))\nmean_squared_error = total_squared_error/len(y_pred3)\nprint(mean_squared_error)\nbag_model_MSE = mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_pred3), annot=True, fmt='g')","output":{"0":{"name":"stdout","output_type":"stream","text":"0.06778169014084508\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":41,"output_type":"execute_result"},"2":{"data":{"image/png":"95bf982371f4bdffda91d36b3dabda5cb1872d48","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":41,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":49,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"0dfbd0","input":"#Hyperparameter tuning (Bagging)","pos":50,"type":"cell"}
{"cell_type":"code","exec_count":43,"id":"255edb","input":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom numpy import mean\nfrom numpy import std","pos":51,"type":"cell"}
{"cell_type":"code","exec_count":44,"id":"c8c863","input":"# evaluate a given model using cross-validation\n#def evaluate_model(model, X, y):\n\t# define the evaluation procedure\n#\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\t# evaluate the model and collect the results\n#\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n#\treturn scores\n\n#def get_models():\n #    models = dict()\n    # define number of trees to consider\n  #   n_trees = [10, 50, 100, 500, 500, 1000, 5000]\n   #  for n in n_trees:\n    #    models[str(n)] = BaggingClassifier(n_estimators=n)\n     #return models\n# get the models to evaluate\n#models = get_models()\n# evaluate the models and store results\n#results, names = list(), list()\n#for name, model in models.items():\n\t# evaluate the model\n#\tscores = evaluate_model(model, x_train_sm, y_train_sm)\n\t# store the results\n#\tresults.append(scores)\n#\tnames.append(name)\n\t# summarize the performance along the way\n#\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n# plot model performance for comparison\n#pyplot.boxplot(results, labels=names, showmeans=True)\n#pyplot.show()","pos":52,"type":"cell"}
{"cell_type":"code","exec_count":45,"id":"c9622b","input":"#gs = GridSearchCV(bag_model(), grid_params, verbose = 1, cv=3, n_jobs = -1)","pos":53,"type":"cell"}
{"cell_type":"code","exec_count":46,"id":"bb3f8f","input":"# evaluate bagging algorithm for classification\nfrom numpy import mean\nfrom numpy import std\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom sklearn.ensemble import BaggingClassifier\n# define the model\nmodel = BaggingClassifier()\n# evaluate the model\ncv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\nn_scores = cross_val_score(model, x_train_sm, y_train_sm, scoring='accuracy', cv=cv, n_jobs=-1, error_score='raise')\n# report performance\nprint('Accuracy: %.3f (%.3f)' % (mean(n_scores), std(n_scores)))","output":{"0":{"name":"stdout","output_type":"stream","text":"Accuracy: 0.957 (0.016)\n"}},"pos":54,"type":"cell"}
{"cell_type":"code","exec_count":47,"id":"304a56","input":"param_grid = {'base_estimator__max_depth' : [1, 2, 3, 4, 5],'max_samples' : [0.05, 0.1, 0.2, 0.5]}\n\nclf = GridSearchCV(BaggingClassifier(DecisionTreeClassifier(),n_estimators = 100, max_features = 0.5),param_grid,)\nclf.fit(x_train_sm, y_train_sm)","output":{"0":{"data":{"text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=BaggingClassifier(base_estimator=DecisionTreeClassifier(),\n                                         max_features=0.5, n_estimators=100),\n             param_grid={&#x27;base_estimator__max_depth&#x27;: [1, 2, 3, 4, 5],\n                         &#x27;max_samples&#x27;: [0.05, 0.1, 0.2, 0.5]})</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=BaggingClassifier(base_estimator=DecisionTreeClassifier(),\n                                         max_features=0.5, n_estimators=100),\n             param_grid={&#x27;base_estimator__max_depth&#x27;: [1, 2, 3, 4, 5],\n                         &#x27;max_samples&#x27;: [0.05, 0.1, 0.2, 0.5]})</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: BaggingClassifier</label><div class=\"sk-toggleable__content\"><pre>BaggingClassifier(base_estimator=DecisionTreeClassifier(), max_features=0.5,\n                  n_estimators=100)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">base_estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=BaggingClassifier(base_estimator=DecisionTreeClassifier(),\n                                         max_features=0.5, n_estimators=100),\n             param_grid={'base_estimator__max_depth': [1, 2, 3, 4, 5],\n                         'max_samples': [0.05, 0.1, 0.2, 0.5]})"},"exec_count":47,"output_type":"execute_result"}},"pos":55,"type":"cell"}
{"cell_type":"code","exec_count":48,"id":"211996","input":"y_pred4 = clf.predict(x_test)\ntotal_squared_error = (np.sum((y_test - y_pred4)**2))\nmean_squared_error = total_squared_error/len(y_pred4)\nprint(mean_squared_error)\nbag_model_MSE = mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_pred4), annot=True, fmt='g')","output":{"0":{"name":"stdout","output_type":"stream","text":"0.1431924882629108\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":48,"output_type":"execute_result"},"2":{"data":{"image/png":"7ef4fe9424ce759435a7e65eec837d58ba8a83c5","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":48,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":56,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"b5002b","input":"pie()","output":{"0":{"data":{"iframe":"d94e6d715fd911156f2e2e38e5e4bf47165cb382"},"exec_count":5,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"a6fe0b","input":"scat()","output":{"0":{"data":{"iframe":"c2dd877e636badcc29145edcd64693eeb8798f38"},"exec_count":6,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":62,"id":"4689b2","input":"#Boosting\n#!pip3 install xgboost\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\nxg_reg = xgb.XGBRegressor(objective ='reg:logistic', colsample_bytree = 0.3, learning_rate = 0.1,max_depth = 5, alpha = 10, n_estimators = 10)","pos":41,"type":"cell"}
{"cell_type":"code","exec_count":63,"id":"71ffba","input":"xg_reg.fit(x_train_sm,y_train_sm)\n\ny_preds = xg_reg.predict(x_test)","pos":42,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":65,"id":"d52b2e","input":"xgb.plot_importance(xg_reg)\nplt.rcParams['figure.figsize'] = [5, 5]\nplt.show()","output":{"0":{"data":{"image/png":"1cbb9f8e227fc3b1e0f1cc97b64d00f5cbc72857","text/plain":"<Figure size 432x288 with 1 Axes>"},"exec_count":65,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":68,"id":"5ac445","input":"total_squared_error = (np.sum((y_test - y_preds)**2))\nmean_squared_error = total_squared_error/len(y_preds)\nprint(mean_squared_error)\nbag_model_MSE = mean_squared_error\nfrom sklearn.metrics import confusion_matrix\n#import seaborn as sns\n#sns.heatmap(confusion_matrix(y_test, y_preds), annot=True, fmt='g')","output":{"0":{"name":"stdout","output_type":"stream","text":"0.15472076832930295\n"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"f16818","input":"smoke_hist()","output":{"0":{"data":{"iframe":"3f86f70018c707753b1ea8e226a854331b5c44c0"},"exec_count":7,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"6ed419","input":"fig = px.scatter_matrix(stroke_data,\n    dimensions=[\"age\", \"avg_glucose_level\", \"bmi\"],\n    color=\"stroke\")\nfig.show()","output":{"0":{"data":{"iframe":"6f549593fdea1d45e57a660574b16daa9be11c42"},"exec_count":8,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"4f8bea","input":"hd = pd.read_csv(\"./healthcare-dataset-stroke-data.csv\")\nhd.drop('id',inplace=True,axis=1)\nhd.dropna(inplace=True)\nhd.reset_index(drop=True, inplace=False)\nhd.drop([466, 544, 928, 1559, 2128, 2764, 2840, 3825, 4188, 4209, 4838, 270, 358])\nhd[\"heart_disease\"]=hd[\"heart_disease\"].replace([1],15)\nhd[\"heart_disease\"]=hd[\"heart_disease\"].replace([0],6)\nbmiAgeSexStrokePlot = px.scatter_3d(hd,y=hd[\"avg_glucose_level\"],x=hd[\"age\"], z=hd[\"bmi\"], symbol=\"ever_married\",labels=dict(stroke=\"Number of Strokes\",age=\"Age\",gender=\"Sex\", bmi=\"BMI\", heart_disease=\"If Heart Disease Present\", avg_glucose_level=\"Average Glucose Level\",smoking_status=\"If Smoke\"),color=\"stroke\",opacity=0.8,size=\"heart_disease\",size_max=20)\nbmiAgeSexStrokePlot.update_yaxes(tick0=1.0, dtick=1.0)\n#bmiAgeSexStrokePlot.update_traces(marker_size = 2.5)\nbmiAgeSexStrokePlot.update_xaxes(tick0=1, dtick=10)\nbmiAgeSexStrokePlot.update_layout(margin=dict(l=40, r=40, b=40, t=40))\n#Multidimensional plot that depicts most of the variables with the stats of the given person including marriage status.\n#Younger people typically have a lower glucose level\n#Higher glucose level, higher chance to get a stroke\n#Older, higher chance\n#Higher BMI, higher chance\n#Females typically have a lower glucose level","output":{"0":{"data":{"iframe":"856548a07e688d62dc23ccaa04b5b9f14cf9bc18"},"exec_count":9,"output_type":"execute_result"}},"pos":12,"type":"cell"}
{"cell_type":"markdown","id":"6180c1","input":"## EDA - Exploratory Data Analysis\n\n","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"660781","input":"The older you are, the more likely you are to have a stroke. The higher you average glucose level is, the higher the stroke risk becomes. The higher your BMI is, the more likely you ate to have a stroke\n\nThe most dangerous combination is a high glucose level, and old age\n\nThe only data point that does not have any direct relation to strokes is age, although it does raise the chance for a person to get a stroke, when they are older\n","pos":11,"type":"cell"}
{"cell_type":"raw","id":"040202","input":"Reference:\nMale = 0\nYes (ever married) = 0\nUrban = 0\nUnknown = 0, formerly smoked = 1, never smoked = 2, smokes = 3\nGov job = 0, never = 1, private = 2, self = 3, children = 4","pos":16,"type":"cell"}
{"id":0,"time":1657635534515,"type":"user"}
{"last_load":1657635534622,"type":"file"}