{"backend_state":"running","connection_file":"/projects/65cfa0f0-7e13-4335-a821-03f129071bce/.local/share/jupyter/runtime/kernel-fbde3ed6-ca6e-40fd-8bf8-52573965a82b.json","kernel":"ds_env","kernel_error":"","kernel_state":"busy","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","end":1657223385936,"exec_count":1,"id":"8d7ffd","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px","kernel":"ds_env","no_halt":true,"pos":0,"start":1657223385537,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223385991,"exec_count":2,"id":"2c0713","input":"stroke_data = pd.read_csv(\"healthcare-dataset-stroke-data.csv\")\n#hypertension = high blood pressure\nstroke_data.dropna(axis = 0, how = 'any', inplace = True)\nstroke_data.drop(stroke_data.index[stroke_data['gender'] == 'Other'], inplace = True)\n\nstroke_data1 = stroke_data.loc[stroke_data['avg_glucose_level'] <= 168.32]\nstroke_data = stroke_data1\nstroke_data.reset_index(drop = True, inplace = True)\n\nstroke_data2 = stroke_data.loc[stroke_data['bmi'] <= 47.5]\nstroke_data = stroke_data2\nstroke_data.reset_index(drop = True, inplace = True)\n\nstroke_data","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>31112</td>\n      <td>Male</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>53882</td>\n      <td>Male</td>\n      <td>74.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>70.09</td>\n      <td>27.4</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>10434</td>\n      <td>Female</td>\n      <td>69.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>94.39</td>\n      <td>22.8</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60491</td>\n      <td>Female</td>\n      <td>78.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>58.57</td>\n      <td>24.2</td>\n      <td>Unknown</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>12109</td>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>80.43</td>\n      <td>29.7</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4254</th>\n      <td>14180</td>\n      <td>Female</td>\n      <td>13.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>children</td>\n      <td>Rural</td>\n      <td>103.08</td>\n      <td>18.6</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4255</th>\n      <td>44873</td>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Urban</td>\n      <td>125.20</td>\n      <td>40.0</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4256</th>\n      <td>19723</td>\n      <td>Female</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>82.99</td>\n      <td>30.6</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4257</th>\n      <td>37544</td>\n      <td>Male</td>\n      <td>51.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>166.29</td>\n      <td>25.6</td>\n      <td>formerly smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4258</th>\n      <td>44679</td>\n      <td>Female</td>\n      <td>44.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Govt_job</td>\n      <td>Urban</td>\n      <td>85.28</td>\n      <td>26.2</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>4259 rows Ã— 12 columns</p>\n</div>","text/plain":"         id  gender   age  hypertension  heart_disease ever_married  \\\n0     31112    Male  80.0             0              1          Yes   \n1     53882    Male  74.0             1              1          Yes   \n2     10434  Female  69.0             0              0           No   \n3     60491  Female  78.0             0              0          Yes   \n4     12109  Female  81.0             1              0          Yes   \n...     ...     ...   ...           ...            ...          ...   \n4254  14180  Female  13.0             0              0           No   \n4255  44873  Female  81.0             0              0          Yes   \n4256  19723  Female  35.0             0              0          Yes   \n4257  37544    Male  51.0             0              0          Yes   \n4258  44679  Female  44.0             0              0          Yes   \n\n          work_type Residence_type  avg_glucose_level   bmi   smoking_status  \\\n0           Private          Rural             105.92  32.5     never smoked   \n1           Private          Rural              70.09  27.4     never smoked   \n2           Private          Urban              94.39  22.8     never smoked   \n3           Private          Urban              58.57  24.2          Unknown   \n4           Private          Rural              80.43  29.7     never smoked   \n...             ...            ...                ...   ...              ...   \n4254       children          Rural             103.08  18.6          Unknown   \n4255  Self-employed          Urban             125.20  40.0     never smoked   \n4256  Self-employed          Rural              82.99  30.6     never smoked   \n4257        Private          Rural             166.29  25.6  formerly smoked   \n4258       Govt_job          Urban              85.28  26.2          Unknown   \n\n      stroke  \n0          1  \n1          1  \n2          1  \n3          1  \n4          1  \n...      ...  \n4254       0  \n4255       0  \n4256       0  \n4257       0  \n4258       0  \n\n[4259 rows x 12 columns]"},"exec_count":2}},"pos":1,"start":1657223385947,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223386032,"exec_count":3,"id":"c560f6","input":"stroke_data.describe()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>37132.980512</td>\n      <td>40.596497</td>\n      <td>0.068561</td>\n      <td>0.036394</td>\n      <td>91.503646</td>\n      <td>27.814299</td>\n      <td>0.031932</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>20978.055430</td>\n      <td>22.445165</td>\n      <td>0.252735</td>\n      <td>0.187289</td>\n      <td>22.703827</td>\n      <td>6.722199</td>\n      <td>0.175841</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>77.000000</td>\n      <td>0.080000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>55.120000</td>\n      <td>10.300000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>18682.000000</td>\n      <td>22.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>75.060000</td>\n      <td>23.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>37640.000000</td>\n      <td>41.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>88.050000</td>\n      <td>27.400000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>55363.000000</td>\n      <td>58.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>104.045000</td>\n      <td>32.100000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>72940.000000</td>\n      <td>82.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>168.150000</td>\n      <td>47.500000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"                 id          age  hypertension  heart_disease  \\\ncount   4259.000000  4259.000000   4259.000000    4259.000000   \nmean   37132.980512    40.596497      0.068561       0.036394   \nstd    20978.055430    22.445165      0.252735       0.187289   \nmin       77.000000     0.080000      0.000000       0.000000   \n25%    18682.000000    22.000000      0.000000       0.000000   \n50%    37640.000000    41.000000      0.000000       0.000000   \n75%    55363.000000    58.000000      0.000000       0.000000   \nmax    72940.000000    82.000000      1.000000       1.000000   \n\n       avg_glucose_level          bmi       stroke  \ncount        4259.000000  4259.000000  4259.000000  \nmean           91.503646    27.814299     0.031932  \nstd            22.703827     6.722199     0.175841  \nmin            55.120000    10.300000     0.000000  \n25%            75.060000    23.000000     0.000000  \n50%            88.050000    27.400000     0.000000  \n75%           104.045000    32.100000     0.000000  \nmax           168.150000    47.500000     1.000000  "},"exec_count":3}},"pos":2,"start":1657223385999,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223386045,"exec_count":4,"id":"08ae64","input":"def pie():\n    global stroke_data\n    new_stroke_data = stroke_data.groupby('smoking_status').count()\n    options = list(new_stroke_data.index)\n    counts = []\n    for val in options:\n        counts.append(new_stroke_data[\"heart_disease\"][val])\n\n    new_fig = px.pie(new_stroke_data, values=counts, names=options, title=\"Percentage of Smokers\")\n    new_fig.show()\ndef scat():\n    global stroke_data\n    new_fig = px.scatter(stroke_data, x=\"age\", y=\"bmi\",color=\"avg_glucose_level\")\n    new_fig.show()\n\ndef smoke_hist():\n    global stroke_data\n    fig = px.histogram(stroke_data, x=\"smoking_status\", y=\"avg_glucose_level\", color='gender', barmode='group',height=400)\n    fig.show()","kernel":"ds_env","no_halt":true,"pos":6,"start":1657223386041,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223386570,"exec_count":5,"id":"b5002b","input":"pie()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"b2a0dcfc93f6d53e8b97c7c9bbae35a3913f4a7c"}}},"pos":7,"start":1657223386057,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223386675,"exec_count":6,"id":"a6fe0b","input":"scat()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"ffb17c94460dbcb39614c04f8f136ae9a08315a5"}}},"pos":8,"start":1657223386577,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223386785,"exec_count":7,"id":"f16818","input":"smoke_hist()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"11a1d26a9cd341072a889646c0e8cd54edf859a2"}}},"pos":9,"start":1657223386682,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223386860,"exec_count":8,"id":"6ed419","input":"fig = px.scatter_matrix(stroke_data,\n    dimensions=[\"age\", \"avg_glucose_level\", \"bmi\"],\n    color=\"stroke\")\nfig.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"9f2977b01c9b6a0f089e6e28cc704913f71558c7"}}},"pos":10,"start":1657223386794,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223386994,"exec_count":9,"id":"4f8bea","input":"hd = pd.read_csv(\"./healthcare-dataset-stroke-data.csv\")\nhd.drop('id',inplace=True,axis=1)\nhd.dropna(inplace=True)\nhd.reset_index(drop=True, inplace=False)\nhd.drop([466, 544, 928, 1559, 2128, 2764, 2840, 3825, 4188, 4209, 4838, 270, 358])\nhd[\"heart_disease\"]=hd[\"heart_disease\"].replace([1],15)\nhd[\"heart_disease\"]=hd[\"heart_disease\"].replace([0],6)\nbmiAgeSexStrokePlot = px.scatter_3d(hd,y=hd[\"avg_glucose_level\"],x=hd[\"age\"], z=hd[\"bmi\"], symbol=\"ever_married\",labels=dict(stroke=\"Number of Strokes\",age=\"Age\",gender=\"Sex\", bmi=\"BMI\", heart_disease=\"If Heart Disease Present\", avg_glucose_level=\"Average Glucose Level\",smoking_status=\"If Smoke\"),color=\"stroke\",opacity=0.8,size=\"heart_disease\",size_max=20)\nbmiAgeSexStrokePlot.update_yaxes(tick0=1.0, dtick=1.0)\n#bmiAgeSexStrokePlot.update_traces(marker_size = 2.5)\nbmiAgeSexStrokePlot.update_xaxes(tick0=1, dtick=10)\nbmiAgeSexStrokePlot.update_layout(margin=dict(l=40, r=40, b=40, t=40))\n#Multidimensional plot that depicts most of the variables with the stats of the given person including marriage status.\n#Younger people typically have a lower glucose level\n#Higher glucose level, higher chance to get a stroke\n#Older, higher chance\n#Higher BMI, higher chance\n#Females typically have a lower glucose level","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"iframe":"424d43518306c69a58f73a89e4c062c6873e12fb"}}},"pos":12,"start":1657223386870,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223387003,"exec_count":10,"id":"f20bf8","input":"#X and Y (x = variables, y = stroke or not)\n#Scaling?","kernel":"ds_env","no_halt":true,"pos":13,"start":1657223387001,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223387015,"exec_count":11,"id":"9b913d","input":"def twoVarDummy(column, newColumn):\n    dummyVar = pd.get_dummies(stroke_data[column])\n    dummyVar.head()\n    stroke_data[column] = dummyVar[dummyVar.columns[0]]","kernel":"ds_env","no_halt":true,"pos":14,"start":1657223387011,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223387257,"exec_count":12,"id":"444bd5","input":"twoVarDummy('gender', 'sex')\ntwoVarDummy('ever_married', 'maritialStatus')\ntwoVarDummy('Residence_type', 'Residence')","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stderr","text":"/tmp/ipykernel_4721/879011250.py:4: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n"}},"pos":15,"start":1657223387022,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223387269,"exec_count":13,"id":"6a485e","input":"def multDummy(column):\n    dummiesMultVar = pd.get_dummies(stroke_data[column])\n    for i in range(0, len(dummiesMultVar)):\n        for j in range(0, len(dummiesMultVar.columns)-1):\n            colName = dummiesMultVar.columns[j]\n            colName0 = dummiesMultVar.columns[0]\n            if dummiesMultVar[colName][i] == 1:\n                dummiesMultVar[colName0][i] = j\n    print(dummiesMultVar.head())\n    stroke_data[column] = dummiesMultVar[colName0]","kernel":"ds_env","no_halt":true,"pos":17,"start":1657223387264,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223388099,"exec_count":14,"id":"2fa6c5","input":"multDummy('smoking_status')","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"   Unknown  formerly smoked  never smoked  smokes\n0        2                0             1       0\n1        2                0             1       0\n2        2                0             1       0\n3        0                0             0       0\n4        2                0             1       0\n"},"1":{"name":"stderr","text":"/tmp/ipykernel_4721/2613986386.py:10: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n"}},"pos":18,"start":1657223387276,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223388917,"exec_count":15,"id":"603289","input":"multDummy('work_type')","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"   Govt_job  Never_worked  Private  Self-employed  children\n0         2             0        1              0         0\n1         2             0        1              0         0\n2         2             0        1              0         0\n3         2             0        1              0         0\n4         2             0        1              0         0\n"},"1":{"name":"stderr","text":"/tmp/ipykernel_4721/2613986386.py:10: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n"}},"pos":19,"start":1657223388103,"state":"done","type":"cell"}
{"cell_type":"code","end":1657223388936,"exec_count":16,"id":"1185d3","input":"stroke_data.tail()","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>4254</th>\n      <td>14180</td>\n      <td>1</td>\n      <td>13.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>103.08</td>\n      <td>18.6</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4255</th>\n      <td>44873</td>\n      <td>1</td>\n      <td>81.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>125.20</td>\n      <td>40.0</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4256</th>\n      <td>19723</td>\n      <td>1</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>1</td>\n      <td>82.99</td>\n      <td>30.6</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4257</th>\n      <td>37544</td>\n      <td>0</td>\n      <td>51.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n      <td>166.29</td>\n      <td>25.6</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4258</th>\n      <td>44679</td>\n      <td>1</td>\n      <td>44.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>85.28</td>\n      <td>26.2</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"         id  gender   age  hypertension  heart_disease  ever_married  \\\n4254  14180       1  13.0             0              0             1   \n4255  44873       1  81.0             0              0             0   \n4256  19723       1  35.0             0              0             0   \n4257  37544       0  51.0             0              0             0   \n4258  44679       1  44.0             0              0             0   \n\n      work_type  Residence_type  avg_glucose_level   bmi  smoking_status  \\\n4254          0               1             103.08  18.6               0   \n4255          3               0             125.20  40.0               2   \n4256          3               1              82.99  30.6               2   \n4257          2               1             166.29  25.6               1   \n4258          0               0              85.28  26.2               0   \n\n      stroke  \n4254       0  \n4255       0  \n4256       0  \n4257       0  \n4258       0  "},"exec_count":16}},"pos":20,"scrolled":true,"start":1657223388928,"state":"done","type":"cell"}
{"cell_type":"code","id":"63ab58","input":"","pos":4,"type":"cell"}
{"cell_type":"code","id":"fbe5d1","input":"","pos":3,"type":"cell"}
{"cell_type":"markdown","id":"6180c1","input":"## EDA - Exploratory Data Analysis\n\n","pos":5,"state":"done","type":"cell"}
{"cell_type":"markdown","id":"660781","input":"The older you are, the more likely you are to have a stroke. The higher you average glucose level is, the higher the stroke risk becomes. The higher your BMI is, the more likely you ate to have a stroke\n\nThe most dangerous combination is a high glucose level, and old age\n\nThe only data point that does not have any direct relation to strokes is age, although it does raise the chance for a person to get a stroke, when they are older\n","pos":11,"state":"done","type":"cell"}
{"cell_type":"raw","id":"040202","input":"Reference:\nMale = 0\nYes (ever married) = 0\nUrban = 0\nUnknown = 0, formerly smoked = 1, never smoked = 2, smokes = 3\nGov job = 0, never = 1, private = 2, self = 3, children = 4","pos":16,"state":"done","type":"cell"}
{"end":1657223388947,"exec_count":17,"id":"9b0bb3","input":"#Machine learning set-up (NEED THIS for every model)","kernel":"ds_env","no_halt":true,"pos":24.5,"start":1657223388943,"state":"done","type":"cell"}
{"end":1657223389381,"exec_count":18,"id":"4b5bf3","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\ntarget = stroke_data['stroke']\ninput_columns = stroke_data.loc[:, stroke_data.columns != 'stroke']\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size = 0.2)","kernel":"ds_env","no_halt":true,"pos":29,"start":1657223388951,"state":"done","type":"cell"}
{"end":1657223389396,"exec_count":19,"id":"7ae0be","input":"#KNN original (no modifications) -> only need the import for future KNNs","kernel":"ds_env","no_halt":true,"pos":29.25,"start":1657223389392,"state":"done","type":"cell"}
{"end":1657223389464,"exec_count":20,"id":"272a4c","input":"from sklearn.neighbors import KNeighborsClassifier as KNN\nk = 5\nmy_KNN_model = KNN(n_neighbors = k)\nmy_KNN_model.fit(x_train, y_train)\ny_pred = my_KNN_model.predict(x_test)","kernel":"ds_env","no_halt":true,"pos":29.5,"start":1657223389404,"state":"done","type":"cell"}
{"end":1657223389489,"exec_count":21,"id":"74a085","input":"total_squared_error = (np.sum((y_test - y_pred)**2))\nmean_squared_error = total_squared_error/len(y_pred)\nprint(mean_squared_error)\nkNN_MSE = mean_squared_error","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.022300469483568074\n"}},"pos":33,"start":1657223389476,"state":"done","type":"cell"}
{"end":1657223390457,"exec_count":22,"id":"bad5f6","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":22},"1":{"data":{"image/png":"13e609bad2e5f4e879c79c6f40a7c906aca56b81","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":34,"start":1657223389495,"state":"done","type":"cell"}
{"end":1657223391712,"exec_count":23,"id":"77908a","input":"#min k calculations\nimport matplotlib.pyplot as plt\nerror_rate = []\nfor i in range(1,40):\n knn = KNN(n_neighbors=i)\n knn.fit(x_train,y_train)\n pred_i = knn.predict(x_test)\n error_rate.append(np.mean(pred_i != y_test))\n\nplt.figure(figsize=(10,6))\nplt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', \n         marker='o',markerfacecolor='red', markersize=10)\nplt.title('Error Rate vs. K Value')\nplt.xlabel('K')\nplt.ylabel('Error Rate')\nprint(\"Minimum error:-\",min(error_rate),\"at K =\",error_rate.index(min(error_rate)))","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Minimum error:- 0.022300469483568074 at K = 3\n"},"1":{"data":{"image/png":"034c4e428078f2eaac61b083e3be1148b877316c","text/plain":"<Figure size 720x432 with 1 Axes>"},"metadata":{"needs_background":"light"}}},"pos":35,"start":1657223390468,"state":"done","type":"cell"}
{"end":1657223391806,"exec_count":24,"id":"532720","input":"#SMOTE (dealing with skewed data)\nfrom imblearn.over_sampling import SMOTE\nfrom collections import Counter\ncounter = Counter(y_train)\nprint('Before', counter)\nsmt = SMOTE()\nx_train_sm, y_train_sm = smt.fit_resample(x_train, y_train)\n\ncounter = Counter(y_train_sm)\nprint('After', counter)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Before Counter({0: 3290, 1: 117})\n"},"1":{"name":"stdout","text":"After Counter({0: 3290, 1: 3290})\n"}},"pos":36,"start":1657223391719,"state":"done","type":"cell"}
{"end":1657223392010,"exec_count":25,"id":"f49e03","input":"#KNN after using SMOTE\nmy_KNN_model.fit(x_train_sm, y_train_sm)\ny_pred = my_KNN_model.predict(x_test)\ntotal_squared_error = (np.sum((y_test - y_pred)**2))\nmean_squared_error = total_squared_error/len(y_pred)\nprint(mean_squared_error)\nkNN_MSE = mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.36502347417840375\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":25},"2":{"data":{"image/png":"f66ce735f341afc293f9c67e05a6bb2b147c99e7","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":37,"start":1657223391811,"state":"done","type":"cell"}
{"end":1657223392019,"exec_count":26,"id":"ebc58b","input":"#Hyperparameter tuning (KNN)","kernel":"ds_env","no_halt":true,"pos":38.5,"start":1657223392015,"state":"done","type":"cell"}
{"end":1657223392037,"exec_count":27,"id":"81b709","input":"from sklearn.model_selection import GridSearchCV","kernel":"ds_env","no_halt":true,"pos":40,"start":1657223392034,"state":"done","type":"cell"}
{"end":1657223392046,"exec_count":28,"id":"294dce","input":"grid_params = { 'n_neighbors' : [1, 5,7,9,11,13,15],\n               'weights' : ['uniform','distance'],\n               'algorithm' : ['brute', 'kd_tree', 'ball_tree'],\n               'metric' : ['minkowski','euclidean','manhattan']}","kernel":"ds_env","no_halt":true,"pos":41,"start":1657223392041,"state":"done","type":"cell"}
{"end":1657223392058,"exec_count":29,"id":"1244b7","input":"gs = GridSearchCV(KNN(), grid_params, verbose = 1, cv=3, n_jobs = -1)","kernel":"ds_env","no_halt":true,"pos":42,"start":1657223392053,"state":"done","type":"cell"}
{"end":1657223414277,"exec_count":30,"id":"1ebb15","input":"g_res = gs.fit(x_train_sm, y_train_sm)","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"Fitting 3 folds for each of 126 candidates, totalling 378 fits\n"}},"pos":43,"start":1657223392077,"state":"done","type":"cell"}
{"end":1657223414307,"exec_count":31,"id":"9a0e96","input":"g_res.best_score_","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"0.779635710042852"},"exec_count":31}},"pos":44,"start":1657223414291,"state":"done","type":"cell"}
{"end":1657223414320,"exec_count":32,"id":"458076","input":"g_res.best_params_","kernel":"ds_env","no_halt":true,"output":{"0":{"data":{"text/plain":"{'algorithm': 'brute',\n 'metric': 'manhattan',\n 'n_neighbors': 1,\n 'weights': 'uniform'}"},"exec_count":32}},"pos":45,"start":1657223414311,"state":"done","type":"cell"}
{"end":1657223414328,"exec_count":33,"id":"dc4335","input":"#Testing tuning (Most accurate KNN model as of right now)","kernel":"ds_env","no_halt":true,"pos":47,"start":1657223414323,"state":"done","type":"cell"}
{"end":1657223414714,"exec_count":34,"id":"97e4bd","input":"knn2 = KNN(n_neighbors = 1, weights = 'uniform', algorithm = 'brute', metric = 'manhattan')\nknn2.fit(x_train_sm, y_train_sm)\ny_pred2 = knn2.predict(x_test)\ntotal_squared_error = (np.sum((y_test - y_pred2)**2))\nmean_squared_error = total_squared_error/len(y_pred2)\nprint(mean_squared_error)\nkNN_MSE = mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_pred2), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.289906103286385\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":34},"2":{"data":{"image/png":"032e9333288e9e4da62e4c2b23eb523829ad6022","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":48,"start":1657223414332,"state":"done","type":"cell"}
{"end":1657223414724,"exec_count":35,"id":"4689b2","input":"#Boosting\n#import xgboost as xgb\n#from xgboost.xgbclassifier import XGBClassifier\n#xgboost = XGBClassifier(n_estimators = 1000, learning_rate = 0.05).fit(x_train, Y_train, early_stopping_rounds = 5, eval_set = [(x_test, y_test)],verbose = False)\n#score_xgb = xgboost.score(x_test,y_test)","kernel":"ds_env","no_halt":true,"pos":50,"start":1657223414719,"state":"done","type":"cell"}
{"end":1657223414732,"exec_count":36,"id":"851399","input":"#Bagging model (with modified data but without GridSearch)","kernel":"ds_env","no_halt":true,"pos":50.25,"start":1657223414727,"state":"done","type":"cell"}
{"end":1657223414749,"exec_count":37,"id":"35f2bb","input":"from sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import BaggingClassifier\nbag_model = BaggingClassifier(base_estimator=DecisionTreeClassifier(), n_estimators=100, max_samples=0.8, bootstrap=True, oob_score=True, random_state=0)","kernel":"ds_env","no_halt":true,"pos":50.5,"start":1657223414737,"state":"done","type":"cell"}
{"end":1657223416841,"exec_count":38,"id":"81281c","input":"bag_model.fit(x_train_sm, y_train_sm)\nbag_model.oob_score_\ny_pred3 = bag_model.predict(x_test)","kernel":"ds_env","no_halt":true,"pos":50.75,"start":1657223414758,"state":"done","type":"cell"}
{"end":1657223417037,"exec_count":39,"id":"2111fa","input":"total_squared_error = (np.sum((y_test - y_pred3)**2))\nmean_squared_error = total_squared_error/len(y_pred3)\nprint(mean_squared_error)\nbag_model_MSE = mean_squared_error\nfrom sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test, y_pred3), annot=True, fmt='g')","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":"0.07629107981220658\n"},"1":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":39},"2":{"data":{"image/png":"2f91134f22e29546ecf8f93cb7a81690b21b1f81","text/plain":"<Figure size 432x288 with 2 Axes>"},"metadata":{"needs_background":"light"}}},"pos":51,"start":1657223416861,"state":"done","type":"cell"}
{"end":1657223417046,"exec_count":40,"id":"0dfbd0","input":"#Hyperparameter tuning (Bagging)","kernel":"ds_env","no_halt":true,"pos":52,"start":1657223417041,"state":"done","type":"cell"}
{"end":1657223417055,"exec_count":41,"id":"255edb","input":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import RepeatedStratifiedKFold\nfrom numpy import mean\nfrom numpy import std","kernel":"ds_env","no_halt":true,"pos":53,"start":1657223417053,"state":"done","type":"cell"}
{"exec_count":42,"id":"c8c863","input":"# evaluate a given model using cross-validation\ndef evaluate_model(model, X, y):\n\t# define the evaluation procedure\n\tcv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)\n\t# evaluate the model and collect the results\n\tscores = cross_val_score(model, X, y, scoring='accuracy', cv=cv, n_jobs=-1)\n\treturn scores\n\ndef get_models():\n     models = dict()\n    # define number of trees to consider\n     n_trees = [10, 50, 100, 500, 500, 1000, 5000]\n     for n in n_trees:\n        models[str(n)] = BaggingClassifier(n_estimators=n)\n     return models\n# get the models to evaluate\nmodels = get_models()\n# evaluate the models and store results\nresults, names = list(), list()\nfor name, model in models.items():\n\t# evaluate the model\n\tscores = evaluate_model(model, x_train_sm, y_train_sm)\n\t# store the results\n\tresults.append(scores)\n\tnames.append(name)\n\t# summarize the performance along the way\n\tprint('>%s %.3f (%.3f)' % (name, mean(scores), std(scores)))\n# plot model performance for comparison\npyplot.boxplot(results, labels=names, showmeans=True)\npyplot.show()","kernel":"ds_env","no_halt":true,"output":{"0":{"name":"stdout","text":">10 0.944 (0.008)\n"},"1":{"name":"stdout","text":">50 0.950 (0.008)\n"},"2":{"name":"stdout","text":">100 0.949 (0.008)\n"},"3":{"name":"stdout","text":">500 0.951 (0.008)\n"},"4":{"name":"stdout","text":">1000 0.951 (0.008)\n"}},"pos":54,"start":1657223417061,"state":"busy","type":"cell"}
{"id":"5ddc36","input":"","pos":49,"type":"cell"}
{"id":"92a3c6","input":"","pos":56,"type":"cell"}
{"id":"a9d0d9","input":"","pos":46,"type":"cell"}
{"id":"c9622b","input":"#gs = GridSearchCV(bag_model(), grid_params, verbose = 1, cv=3, n_jobs = -1)","kernel":"ds_env","no_halt":true,"pos":55,"state":"run","type":"cell"}
{"id":"dbcfb8","input":"","pos":50.125,"type":"cell"}
{"id":0,"time":1657214000383,"type":"user"}
{"last_load":1657202008420,"type":"file"}