{"backend_state":"init","connection_file":"/projects/65cfa0f0-7e13-4335-a821-03f129071bce/.local/share/jupyter/runtime/kernel-138b0941-a14b-4db5-bc6a-b8af5fb7f38b.json","kernel":"ds_env","kernel_error":"","kernel_state":"idle","kernel_usage":{"cpu":0,"memory":0},"metadata":{"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.13"}},"trust":true,"type":"settings"}
{"cell_type":"code","exec_count":0,"id":"2e6f05","input":"","pos":49,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"458a0e","input":"","pos":48,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"46ce4b","input":"","pos":3,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"4efaf2","input":"","pos":4,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"c93d7f","input":"","pos":31,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cba657","input":"","pos":13,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"cc3e46","input":"","pos":46,"type":"cell"}
{"cell_type":"code","exec_count":0,"id":"e2630b","input":"","pos":42,"type":"cell"}
{"cell_type":"code","exec_count":1,"id":"049369","input":"import pandas as pd\nimport numpy as np\nimport plotly.express as px","pos":0,"type":"cell"}
{"cell_type":"code","exec_count":10,"id":"b29dbd","input":"stroke_data.keys()","output":{"0":{"data":{"text/plain":"Index(['gender', 'age', 'hypertension', 'heart_disease', 'ever_married',\n       'work_type', 'Residence_type', 'avg_glucose_level', 'bmi',\n       'smoking_status', 'stroke'],\n      dtype='object')"},"exec_count":10,"output_type":"execute_result"}},"pos":15,"type":"cell"}
{"cell_type":"code","exec_count":11,"id":"990fc6","input":"stroke_data.info()","output":{"0":{"name":"stdout","output_type":"stream","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4259 entries, 0 to 4258\nData columns (total 11 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   gender             4259 non-null   object \n 1   age                4259 non-null   float64\n 2   hypertension       4259 non-null   int64  \n 3   heart_disease      4259 non-null   int64  \n 4   ever_married       4259 non-null   object \n 5   work_type          4259 non-null   object \n 6   Residence_type     4259 non-null   object \n 7   avg_glucose_level  4259 non-null   float64\n 8   bmi                4259 non-null   float64\n 9   smoking_status     4259 non-null   object \n 10  stroke             4259 non-null   int64  \ndtypes: float64(3), int64(3), object(5)\nmemory usage: 366.1+ KB\n"}},"pos":16,"type":"cell"}
{"cell_type":"code","exec_count":12,"id":"10d118","input":"dummies_gender = pd.get_dummies(stroke_data[\"gender\"])\ndummies_gender.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Female</th>\n      <th>Male</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   Female  Male\n0       0     1\n1       0     1\n2       1     0\n3       1     0\n4       1     0"},"exec_count":12,"output_type":"execute_result"}},"pos":18,"type":"cell"}
{"cell_type":"code","exec_count":13,"id":"e1a5d3","input":"stroke_data[\"gender\"] = dummies_gender[\"Male\"]\nprint(stroke_data.head())\nprint(stroke_data.keys())\n\n# 1 - Male\n# 0 - Female","output":{"0":{"name":"stdout","output_type":"stream","text":"   gender   age  hypertension  heart_disease ever_married work_type  \\\n0       1  80.0             0              1          Yes   Private   \n1       1  74.0             1              1          Yes   Private   \n2       0  69.0             0              0           No   Private   \n3       0  78.0             0              0          Yes   Private   \n4       0  81.0             1              0          Yes   Private   \n\n  Residence_type  avg_glucose_level   bmi smoking_status  stroke  \n0          Rural             105.92  32.5   never smoked       1  \n1          Rural              70.09  27.4   never smoked       1  \n2          Urban              94.39  22.8   never smoked       1  \n3          Urban              58.57  24.2        Unknown       1  \n4          Rural              80.43  29.7   never smoked       1  \nIndex(['gender', 'age', 'hypertension', 'heart_disease', 'ever_married',\n       'work_type', 'Residence_type', 'avg_glucose_level', 'bmi',\n       'smoking_status', 'stroke'],\n      dtype='object')\n"},"1":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1428/2185026953.py:1: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n"}},"pos":19,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":14,"id":"9ee2c7","input":"dummies_married = pd.get_dummies(stroke_data[\"ever_married\"])\ndummies_married.head()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>No</th>\n      <th>Yes</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"   No  Yes\n0   0    1\n1   0    1\n2   1    0\n3   0    1\n4   0    1"},"exec_count":14,"output_type":"execute_result"}},"pos":20,"type":"cell"}
{"cell_type":"code","exec_count":15,"id":"cede83","input":"stroke_data[\"ever_married\"] = dummies_married[\"Yes\"]\nprint(stroke_data.head())\nprint(stroke_data.keys())\n\n# 1 - Yes\n# 0 - No","output":{"0":{"name":"stdout","output_type":"stream","text":"   gender   age  hypertension  heart_disease  ever_married work_type  \\\n0       1  80.0             0              1             1   Private   \n1       1  74.0             1              1             1   Private   \n2       0  69.0             0              0             0   Private   \n3       0  78.0             0              0             1   Private   \n4       0  81.0             1              0             1   Private   \n\n  Residence_type  avg_glucose_level   bmi smoking_status  stroke  \n0          Rural             105.92  32.5   never smoked       1  \n1          Rural              70.09  27.4   never smoked       1  \n2          Urban              94.39  22.8   never smoked       1  \n3          Urban              58.57  24.2        Unknown       1  \n4          Rural              80.43  29.7   never smoked       1  \nIndex(['gender', 'age', 'hypertension', 'heart_disease', 'ever_married',\n       'work_type', 'Residence_type', 'avg_glucose_level', 'bmi',\n       'smoking_status', 'stroke'],\n      dtype='object')\n"},"1":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1428/2366302696.py:1: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n"}},"pos":21,"scrolled":true,"type":"cell"}
{"cell_type":"code","exec_count":16,"id":"5c7f97","input":"dummies_work = pd.get_dummies(stroke_data[\"work_type\"])\ndummies_work","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Govt_job</th>\n      <th>Never_worked</th>\n      <th>Private</th>\n      <th>Self-employed</th>\n      <th>children</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4254</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4255</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4256</th>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4257</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4258</th>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>4259 rows × 5 columns</p>\n</div>","text/plain":"      Govt_job  Never_worked  Private  Self-employed  children\n0            0             0        1              0         0\n1            0             0        1              0         0\n2            0             0        1              0         0\n3            0             0        1              0         0\n4            0             0        1              0         0\n...        ...           ...      ...            ...       ...\n4254         0             0        0              0         1\n4255         0             0        0              1         0\n4256         0             0        0              1         0\n4257         0             0        1              0         0\n4258         1             0        0              0         0\n\n[4259 rows x 5 columns]"},"exec_count":16,"output_type":"execute_result"}},"pos":22,"type":"cell"}
{"cell_type":"code","exec_count":17,"id":"b18884","input":"stroke_data[\"work_type\"] = dummies_work[\"Male\"]\nprint(stroke_data.head())\nprint(stroke_data.keys())\n\n# 1 - Male\n# 0 - Female","output":{"0":{"ename":"KeyError","evalue":"'Male'","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:3621\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3620\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3621\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcasted_key\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3622\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/_libs/index.pyx:136\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/_libs/index.pyx:163\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5198\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:5206\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'Male'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","Input \u001b[0;32mIn [17]\u001b[0m, in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0m stroke_data[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwork_type\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m \u001b[43mdummies_work\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mMale\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28mprint\u001b[39m(stroke_data\u001b[38;5;241m.\u001b[39mhead())\n\u001b[1;32m      3\u001b[0m \u001b[38;5;28mprint\u001b[39m(stroke_data\u001b[38;5;241m.\u001b[39mkeys())\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/frame.py:3505\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3503\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   3504\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 3505\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mcolumns\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mget_loc\u001b[49m\u001b[43m(\u001b[49m\u001b[43mkey\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3506\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   3507\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n","File \u001b[0;32m~/miniconda3/envs/ds_env/lib/python3.8/site-packages/pandas/core/indexes/base.py:3623\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3621\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[1;32m   3622\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n\u001b[0;32m-> 3623\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3624\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3625\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3626\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3627\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3628\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n","\u001b[0;31mKeyError\u001b[0m: 'Male'"]}},"pos":23,"type":"cell"}
{"cell_type":"code","exec_count":18,"id":"8cf505","input":"dummies_home = pd.get_dummies(stroke_data[\"Residence_type\"])\ndummies_home","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Rural</th>\n      <th>Urban</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4254</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4255</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4256</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4257</th>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4258</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>4259 rows × 2 columns</p>\n</div>","text/plain":"      Rural  Urban\n0         1      0\n1         1      0\n2         0      1\n3         0      1\n4         1      0\n...     ...    ...\n4254      1      0\n4255      0      1\n4256      1      0\n4257      1      0\n4258      0      1\n\n[4259 rows x 2 columns]"},"exec_count":18,"output_type":"execute_result"}},"pos":24,"type":"cell"}
{"cell_type":"code","exec_count":19,"id":"995cdb","input":"stroke_data[\"Residence_type\"] = dummies_home[\"Rural\"]\nprint(stroke_data.head())\nprint(stroke_data.keys())\n\n# 1 - Rural\n# 0 - Urban","output":{"0":{"name":"stdout","output_type":"stream","text":"   gender   age  hypertension  heart_disease  ever_married work_type  \\\n0       1  80.0             0              1             1   Private   \n1       1  74.0             1              1             1   Private   \n2       0  69.0             0              0             0   Private   \n3       0  78.0             0              0             1   Private   \n4       0  81.0             1              0             1   Private   \n\n   Residence_type  avg_glucose_level   bmi smoking_status  stroke  \n0               1             105.92  32.5   never smoked       1  \n1               1              70.09  27.4   never smoked       1  \n2               0              94.39  22.8   never smoked       1  \n3               0              58.57  24.2        Unknown       1  \n4               1              80.43  29.7   never smoked       1  \nIndex(['gender', 'age', 'hypertension', 'heart_disease', 'ever_married',\n       'work_type', 'Residence_type', 'avg_glucose_level', 'bmi',\n       'smoking_status', 'stroke'],\n      dtype='object')\n"},"1":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1428/1302057370.py:1: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n"}},"pos":25,"type":"cell"}
{"cell_type":"code","exec_count":2,"id":"e3fb6f","input":"stroke_data = pd.read_csv(\"healthcare-dataset-stroke-data.csv\")\n#hypertension = high blood pressure\nstroke_data.dropna(axis = 0, how = 'any', inplace = True)\nstroke_data.drop(stroke_data.index[stroke_data['gender'] == 'Other'], inplace = True)\n\nstroke_data1 = stroke_data.loc[stroke_data['avg_glucose_level'] <= 168.32]\nstroke_data = stroke_data1\nstroke_data.reset_index(drop = True, inplace = True)\n\nstroke_data2 = stroke_data.loc[stroke_data['bmi'] <= 47.5]\nstroke_data = stroke_data2\nstroke_data.reset_index(drop = True, inplace = True)\n\ncolumns_to_drop = ['id']\nstroke_data.drop(columns_to_drop, axis=1, inplace=True)\nstroke_data","output":{"0":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1428/4075248508.py:15: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  stroke_data.drop(columns_to_drop, axis=1, inplace=True)\n"},"1":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>gender</th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>ever_married</th>\n      <th>work_type</th>\n      <th>Residence_type</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>smoking_status</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Male</td>\n      <td>80.0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>105.92</td>\n      <td>32.5</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Male</td>\n      <td>74.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>70.09</td>\n      <td>27.4</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Female</td>\n      <td>69.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>94.39</td>\n      <td>22.8</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Female</td>\n      <td>78.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Urban</td>\n      <td>58.57</td>\n      <td>24.2</td>\n      <td>Unknown</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>80.43</td>\n      <td>29.7</td>\n      <td>never smoked</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>4254</th>\n      <td>Female</td>\n      <td>13.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>No</td>\n      <td>children</td>\n      <td>Rural</td>\n      <td>103.08</td>\n      <td>18.6</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4255</th>\n      <td>Female</td>\n      <td>81.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Urban</td>\n      <td>125.20</td>\n      <td>40.0</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4256</th>\n      <td>Female</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Self-employed</td>\n      <td>Rural</td>\n      <td>82.99</td>\n      <td>30.6</td>\n      <td>never smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4257</th>\n      <td>Male</td>\n      <td>51.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Private</td>\n      <td>Rural</td>\n      <td>166.29</td>\n      <td>25.6</td>\n      <td>formerly smoked</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4258</th>\n      <td>Female</td>\n      <td>44.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Yes</td>\n      <td>Govt_job</td>\n      <td>Urban</td>\n      <td>85.28</td>\n      <td>26.2</td>\n      <td>Unknown</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>4259 rows × 11 columns</p>\n</div>","text/plain":"      gender   age  hypertension  heart_disease ever_married      work_type  \\\n0       Male  80.0             0              1          Yes        Private   \n1       Male  74.0             1              1          Yes        Private   \n2     Female  69.0             0              0           No        Private   \n3     Female  78.0             0              0          Yes        Private   \n4     Female  81.0             1              0          Yes        Private   \n...      ...   ...           ...            ...          ...            ...   \n4254  Female  13.0             0              0           No       children   \n4255  Female  81.0             0              0          Yes  Self-employed   \n4256  Female  35.0             0              0          Yes  Self-employed   \n4257    Male  51.0             0              0          Yes        Private   \n4258  Female  44.0             0              0          Yes       Govt_job   \n\n     Residence_type  avg_glucose_level   bmi   smoking_status  stroke  \n0             Rural             105.92  32.5     never smoked       1  \n1             Rural              70.09  27.4     never smoked       1  \n2             Urban              94.39  22.8     never smoked       1  \n3             Urban              58.57  24.2          Unknown       1  \n4             Rural              80.43  29.7     never smoked       1  \n...             ...                ...   ...              ...     ...  \n4254          Rural             103.08  18.6          Unknown       0  \n4255          Urban             125.20  40.0     never smoked       0  \n4256          Rural              82.99  30.6     never smoked       0  \n4257          Rural             166.29  25.6  formerly smoked       0  \n4258          Urban              85.28  26.2          Unknown       0  \n\n[4259 rows x 11 columns]"},"exec_count":2,"output_type":"execute_result"}},"pos":1,"type":"cell"}
{"cell_type":"code","exec_count":20,"id":"f1b6a9","input":"print(stroke_data.head())\nprint(stroke_data.keys())","output":{"0":{"name":"stdout","output_type":"stream","text":"   gender   age  hypertension  heart_disease  ever_married work_type  \\\n0       1  80.0             0              1             1   Private   \n1       1  74.0             1              1             1   Private   \n2       0  69.0             0              0             0   Private   \n3       0  78.0             0              0             1   Private   \n4       0  81.0             1              0             1   Private   \n\n   Residence_type  avg_glucose_level   bmi smoking_status  stroke  \n0               1             105.92  32.5   never smoked       1  \n1               1              70.09  27.4   never smoked       1  \n2               0              94.39  22.8   never smoked       1  \n3               0              58.57  24.2        Unknown       1  \n4               1              80.43  29.7   never smoked       1  \nIndex(['gender', 'age', 'hypertension', 'heart_disease', 'ever_married',\n       'work_type', 'Residence_type', 'avg_glucose_level', 'bmi',\n       'smoking_status', 'stroke'],\n      dtype='object')\n"}},"pos":26,"type":"cell"}
{"cell_type":"code","exec_count":21,"id":"aa1d5d","input":"columns_to_drop = [\"ever_married\", \"work_type\", \"smoking_status\"]\nstroke_data.drop(columns_to_drop, axis=1, inplace=True)","output":{"0":{"name":"stderr","output_type":"stream","text":"/tmp/ipykernel_1428/3669007567.py:2: SettingWithCopyWarning:\n\n\nA value is trying to be set on a copy of a slice from a DataFrame\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n\n"}},"pos":27,"type":"cell"}
{"cell_type":"code","exec_count":22,"id":"a7be23","input":"print(stroke_data.keys())","output":{"0":{"name":"stdout","output_type":"stream","text":"Index(['gender', 'age', 'hypertension', 'heart_disease', 'Residence_type',\n       'avg_glucose_level', 'bmi', 'stroke'],\n      dtype='object')\n"}},"pos":28,"type":"cell"}
{"cell_type":"code","exec_count":23,"id":"16f680","input":"# Create a variable named target and set it equal to the [\"outcome\"] column in our breast_cancer dataframe.\ntarget = stroke_data['stroke']\ninput_columns = stroke_data.loc[:, stroke_data.columns != \"stroke\"]","pos":29,"type":"cell"}
{"cell_type":"code","exec_count":24,"id":"203d60","input":"pip install -U imbalanced-learn","output":{"0":{"name":"stdout","output_type":"stream","text":"Requirement already satisfied: imbalanced-learn in /projects/65cfa0f0-7e13-4335-a821-03f129071bce/miniconda3/envs/ds_env/lib/python3.8/site-packages (0.9.1)\r\n"},"1":{"name":"stdout","output_type":"stream","text":"Requirement already satisfied: scikit-learn>=1.1.0 in /projects/65cfa0f0-7e13-4335-a821-03f129071bce/miniconda3/envs/ds_env/lib/python3.8/site-packages (from imbalanced-learn) (1.1.1)\r\n"},"2":{"name":"stdout","output_type":"stream","text":"Requirement already satisfied: threadpoolctl>=2.0.0 in /projects/65cfa0f0-7e13-4335-a821-03f129071bce/miniconda3/envs/ds_env/lib/python3.8/site-packages (from imbalanced-learn) (3.1.0)\r\nRequirement already satisfied: numpy>=1.17.3 in /projects/65cfa0f0-7e13-4335-a821-03f129071bce/miniconda3/envs/ds_env/lib/python3.8/site-packages (from imbalanced-learn) (1.22.3)\r\nRequirement already satisfied: joblib>=1.0.0 in /projects/65cfa0f0-7e13-4335-a821-03f129071bce/miniconda3/envs/ds_env/lib/python3.8/site-packages (from imbalanced-learn) (1.1.0)\r\nRequirement already satisfied: scipy>=1.3.2 in /projects/65cfa0f0-7e13-4335-a821-03f129071bce/miniconda3/envs/ds_env/lib/python3.8/site-packages (from imbalanced-learn) (1.8.1)\r\n"},"3":{"name":"stdout","output_type":"stream","text":"Note: you may need to restart the kernel to use updated packages.\n"}},"pos":30,"type":"cell"}
{"cell_type":"code","exec_count":3,"id":"5c8afb","input":"stroke_data.describe()","output":{"0":{"data":{"text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>age</th>\n      <th>hypertension</th>\n      <th>heart_disease</th>\n      <th>avg_glucose_level</th>\n      <th>bmi</th>\n      <th>stroke</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n      <td>4259.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>40.596497</td>\n      <td>0.068561</td>\n      <td>0.036394</td>\n      <td>91.503646</td>\n      <td>27.814299</td>\n      <td>0.031932</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>22.445165</td>\n      <td>0.252735</td>\n      <td>0.187289</td>\n      <td>22.703827</td>\n      <td>6.722199</td>\n      <td>0.175841</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>0.080000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>55.120000</td>\n      <td>10.300000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>22.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>75.060000</td>\n      <td>23.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>41.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>88.050000</td>\n      <td>27.400000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>58.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>104.045000</td>\n      <td>32.100000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>82.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>168.150000</td>\n      <td>47.500000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>","text/plain":"               age  hypertension  heart_disease  avg_glucose_level  \\\ncount  4259.000000   4259.000000    4259.000000        4259.000000   \nmean     40.596497      0.068561       0.036394          91.503646   \nstd      22.445165      0.252735       0.187289          22.703827   \nmin       0.080000      0.000000       0.000000          55.120000   \n25%      22.000000      0.000000       0.000000          75.060000   \n50%      41.000000      0.000000       0.000000          88.050000   \n75%      58.000000      0.000000       0.000000         104.045000   \nmax      82.000000      1.000000       1.000000         168.150000   \n\n               bmi       stroke  \ncount  4259.000000  4259.000000  \nmean     27.814299     0.031932  \nstd       6.722199     0.175841  \nmin      10.300000     0.000000  \n25%      23.000000     0.000000  \n50%      27.400000     0.000000  \n75%      32.100000     0.000000  \nmax      47.500000     1.000000  "},"exec_count":3,"output_type":"execute_result"}},"pos":2,"type":"cell"}
{"cell_type":"code","exec_count":38,"id":"e7f974","input":"import sklearn\nfrom sklearn.model_selection import train_test_split\nfrom imblearn.over_sampling import SMOTE\nx_train, x_test, y_train, y_test = train_test_split(input_columns, target, test_size=0.2, random_state=101)","pos":32,"type":"cell"}
{"cell_type":"code","exec_count":39,"id":"6c2eca","input":"smote = SMOTE(random_state = 101)","pos":33,"type":"cell"}
{"cell_type":"code","exec_count":4,"id":"afebb9","input":"def pie():\n    global stroke_data\n    new_stroke_data = stroke_data.groupby('smoking_status').count()\n    options = list(new_stroke_data.index)\n    counts = []\n    for val in options:\n        counts.append(new_stroke_data[\"heart_disease\"][val])\n\n    new_fig = px.pie(new_stroke_data, values=counts, names=options, title=\"Percentage of Smokers\")\n    new_fig.show()\ndef scat():\n    global stroke_data\n    new_fig = px.scatter(stroke_data, x=\"age\", y=\"bmi\",color=\"avg_glucose_level\")\n    new_fig.show()\n\ndef smoke_hist():\n    global stroke_data\n    fig = px.histogram(stroke_data, x=\"smoking_status\", y=\"avg_glucose_level\", color='gender', barmode='group',height=400)\n    fig.show()","pos":6,"type":"cell"}
{"cell_type":"code","exec_count":40,"id":"a60b3d","input":"print(x_train.shape)\nprint(y_train.shape)\nprint(y_test.shape)","output":{"0":{"name":"stdout","output_type":"stream","text":"(3407, 7)\n(3407,)\n(852,)\n"}},"pos":34,"type":"cell"}
{"cell_type":"code","exec_count":41,"id":"76f119","input":"print(y_train)","output":{"0":{"name":"stdout","output_type":"stream","text":"1790    0\n1230    0\n3655    0\n773     0\n258     0\n       ..\n4079    0\n4171    0\n599     0\n1361    0\n1547    0\nName: stroke, Length: 3407, dtype: int64\n"}},"pos":35,"type":"cell"}
{"cell_type":"code","exec_count":42,"id":"5ba9f4","input":"print(y_test)","output":{"0":{"name":"stdout","output_type":"stream","text":"3954    0\n2060    0\n2912    0\n1724    0\n2153    0\n       ..\n3300    0\n420     0\n4189    0\n812     0\n1649    0\nName: stroke, Length: 852, dtype: int64\n"}},"pos":36,"type":"cell"}
{"cell_type":"code","exec_count":5,"id":"9865e8","input":"pie()","output":{"0":{"data":{"iframe":"49675e3510776d897e1b9c879e6f5ddd31a85ea6"},"exec_count":5,"output_type":"execute_result"}},"pos":7,"type":"cell"}
{"cell_type":"code","exec_count":6,"id":"c45419","input":"scat()","output":{"0":{"data":{"iframe":"7c50b129c2c91d3895fb18215a5f47d34693f3e4"},"exec_count":6,"output_type":"execute_result"}},"pos":8,"type":"cell"}
{"cell_type":"code","exec_count":65,"id":"71b50f","input":"x_oversample, y_oversample = smote.fit_resample(x_train, y_train)\nx_test2, y_test2 = smote.fit_resample(x_test, y_test)","pos":37,"type":"cell"}
{"cell_type":"code","exec_count":66,"id":"0d5a3a","input":"from sklearn import svm\n#Create your model object -- you can go back and change the kernel argument after evaluating your data.\nclf = svm.SVC(kernel = 'linear').fit(x_oversample, y_oversample)\n","pos":38,"type":"cell"}
{"cell_type":"code","exec_count":7,"id":"a508d9","input":"smoke_hist()","output":{"0":{"data":{"iframe":"22b3497466ed9c199ff3d13aa6ce398109032921"},"exec_count":7,"output_type":"execute_result"}},"pos":9,"type":"cell"}
{"cell_type":"code","exec_count":74,"id":"36c7ba","input":"y_hat = clf.predict(x_test2)\ny_hat\n","output":{"0":{"data":{"text/plain":"array([0, 0, 0, ..., 1, 1, 1])"},"exec_count":74,"output_type":"execute_result"}},"pos":43,"type":"cell"}
{"cell_type":"code","exec_count":76,"id":"4e5e66","input":"from sklearn.metrics import confusion_matrix\nimport seaborn as sns\nsns.heatmap(confusion_matrix(y_test2, y_hat), annot=True, fmt='g')","output":{"0":{"data":{"text/plain":"<AxesSubplot:>"},"exec_count":76,"output_type":"execute_result"},"1":{"data":{"image/png":"6ec14cb08c1d566e9339df8a8e1aef9931dc6c5b","text/plain":"<Figure size 432x288 with 2 Axes>"},"exec_count":76,"metadata":{"needs_background":"light"},"output_type":"execute_result"}},"pos":45,"type":"cell"}
{"cell_type":"code","exec_count":77,"id":"2a0ef5","input":"print('Train Accuracy: ', clf.score(x_oversample, y_oversample))\nprint(\"Test Accuracy: \", clf.score(x_test2, y_test2))","output":{"0":{"name":"stdout","output_type":"stream","text":"Train Accuracy:  0.7824242424242425\nTest Accuracy:  0.8323207776427703\n"}},"pos":47,"type":"cell"}
{"cell_type":"code","exec_count":8,"id":"227372","input":"fig = px.scatter_matrix(stroke_data,\n    dimensions=[\"age\", \"avg_glucose_level\", \"bmi\"],\n    color=\"stroke\")\nfig.show()","output":{"0":{"data":{"iframe":"c06289313c4d157711b2c63a51e909182117ab7d"},"exec_count":8,"output_type":"execute_result"}},"pos":10,"type":"cell"}
{"cell_type":"code","exec_count":83,"id":"535b7b","input":"#Compute your MSE.\ntotal_squared_error = (np.sum((y_test2 - y_hat)**2)) #get the sum of all the errors (error = what we want (y_test) - what we predicted (y_hat))\nmean_squared_error = total_squared_error/len(y_test2) #divide this by how many rows/observations we have \nprint(mean_squared_error)\nsvmModelMSE = mean_squared_error","output":{"0":{"name":"stdout","output_type":"stream","text":"0.16767922235722965\n"}},"pos":44,"type":"cell"}
{"cell_type":"code","exec_count":84,"id":"637bbd","input":"from sklearn.model_selection import GridSearchCV\nfrom sklearn.svm import SVC\nparam_grid = {'C': [0.1, 1, 10, 100, 1000],\n              'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n              'kernel': ['rbf']}\n\ngrid = GridSearchCV(SVC(), param_grid, refit = True, verbose = 3, return_train_score=False)\n\n# fitting the model for grid search\ngrid.fit(x_oversample, y_oversample)","output":{"0":{"name":"stdout","output_type":"stream","text":"Fitting 5 folds for each of 25 candidates, totalling 125 fits\n"},"1":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ........C=0.1, gamma=1, kernel=rbf;, score=0.559 total time=   3.2s\n"},"10":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ......C=0.1, gamma=0.1, kernel=rbf;, score=0.875 total time=   2.2s\n"},"100":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ...C=100, gamma=0.0001, kernel=rbf;, score=0.826 total time=   4.7s\n"},"101":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END .......C=1000, gamma=1, kernel=rbf;, score=0.939 total time=   7.3s\n"},"102":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END .......C=1000, gamma=1, kernel=rbf;, score=0.936 total time=   6.9s\n"},"103":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END .......C=1000, gamma=1, kernel=rbf;, score=0.941 total time=   6.4s\n"},"104":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END .......C=1000, gamma=1, kernel=rbf;, score=0.948 total time=   3.0s\n"},"105":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END .......C=1000, gamma=1, kernel=rbf;, score=0.942 total time=   3.2s\n"},"106":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END .....C=1000, gamma=0.1, kernel=rbf;, score=0.940 total time=   1.4s\n"},"107":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END .....C=1000, gamma=0.1, kernel=rbf;, score=0.945 total time=   1.4s\n"},"108":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END .....C=1000, gamma=0.1, kernel=rbf;, score=0.948 total time=   1.4s\n"},"109":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END .....C=1000, gamma=0.1, kernel=rbf;, score=0.933 total time=   1.4s\n"},"11":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END .....C=0.1, gamma=0.01, kernel=rbf;, score=0.833 total time=   1.2s\n"},"110":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END .....C=1000, gamma=0.1, kernel=rbf;, score=0.949 total time=   1.5s\n"},"111":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ....C=1000, gamma=0.01, kernel=rbf;, score=0.939 total time=   2.3s\n"},"112":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ....C=1000, gamma=0.01, kernel=rbf;, score=0.945 total time=   2.8s\n"},"113":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ....C=1000, gamma=0.01, kernel=rbf;, score=0.956 total time=   2.9s\n"},"114":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ....C=1000, gamma=0.01, kernel=rbf;, score=0.943 total time=   2.6s\n"},"115":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ....C=1000, gamma=0.01, kernel=rbf;, score=0.954 total time=   2.6s\n"},"116":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ...C=1000, gamma=0.001, kernel=rbf;, score=0.883 total time=   3.5s\n"},"117":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ...C=1000, gamma=0.001, kernel=rbf;, score=0.898 total time=   3.3s\n"},"118":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ...C=1000, gamma=0.001, kernel=rbf;, score=0.896 total time=   3.2s\n"},"119":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ...C=1000, gamma=0.001, kernel=rbf;, score=0.878 total time=   7.0s\n"},"12":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END .....C=0.1, gamma=0.01, kernel=rbf;, score=0.851 total time=   1.4s\n"},"120":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ...C=1000, gamma=0.001, kernel=rbf;, score=0.903 total time=   9.6s\n"},"121":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ..C=1000, gamma=0.0001, kernel=rbf;, score=0.821 total time=   5.1s\n"},"122":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ..C=1000, gamma=0.0001, kernel=rbf;, score=0.841 total time=   5.4s\n"},"123":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ..C=1000, gamma=0.0001, kernel=rbf;, score=0.858 total time=   5.7s\n"},"124":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ..C=1000, gamma=0.0001, kernel=rbf;, score=0.814 total time=   5.2s\n"},"125":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ..C=1000, gamma=0.0001, kernel=rbf;, score=0.848 total time=   5.8s\n"},"126":{"data":{"text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(estimator=SVC(),\n             param_grid={&#x27;C&#x27;: [0.1, 1, 10, 100, 1000],\n                         &#x27;gamma&#x27;: [1, 0.1, 0.01, 0.001, 0.0001],\n                         &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n             verbose=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(estimator=SVC(),\n             param_grid={&#x27;C&#x27;: [0.1, 1, 10, 100, 1000],\n                         &#x27;gamma&#x27;: [1, 0.1, 0.01, 0.001, 0.0001],\n                         &#x27;kernel&#x27;: [&#x27;rbf&#x27;]},\n             verbose=3)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC()</pre></div></div></div></div></div></div></div></div></div></div>","text/plain":"GridSearchCV(estimator=SVC(),\n             param_grid={'C': [0.1, 1, 10, 100, 1000],\n                         'gamma': [1, 0.1, 0.01, 0.001, 0.0001],\n                         'kernel': ['rbf']},\n             verbose=3)"},"exec_count":84,"output_type":"execute_result"},"13":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END .....C=0.1, gamma=0.01, kernel=rbf;, score=0.844 total time=   1.2s\n"},"14":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END .....C=0.1, gamma=0.01, kernel=rbf;, score=0.827 total time=   1.3s\n"},"15":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END .....C=0.1, gamma=0.01, kernel=rbf;, score=0.824 total time=   1.2s\n"},"16":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ....C=0.1, gamma=0.001, kernel=rbf;, score=0.780 total time=   1.3s\n"},"17":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ....C=0.1, gamma=0.001, kernel=rbf;, score=0.771 total time=   1.4s\n"},"18":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ....C=0.1, gamma=0.001, kernel=rbf;, score=0.784 total time=   1.2s\n"},"19":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ....C=0.1, gamma=0.001, kernel=rbf;, score=0.765 total time=   1.2s\n"},"2":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ........C=0.1, gamma=1, kernel=rbf;, score=0.564 total time=   2.6s\n"},"20":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ....C=0.1, gamma=0.001, kernel=rbf;, score=0.775 total time=   1.4s\n"},"21":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ...C=0.1, gamma=0.0001, kernel=rbf;, score=0.770 total time=   1.5s\n"},"22":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ...C=0.1, gamma=0.0001, kernel=rbf;, score=0.762 total time=   1.4s\n"},"23":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ...C=0.1, gamma=0.0001, kernel=rbf;, score=0.772 total time=   1.7s\n"},"24":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ...C=0.1, gamma=0.0001, kernel=rbf;, score=0.752 total time=   1.3s\n"},"25":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ...C=0.1, gamma=0.0001, kernel=rbf;, score=0.767 total time=   1.3s\n"},"26":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ..........C=1, gamma=1, kernel=rbf;, score=0.933 total time=   3.2s\n"},"27":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ..........C=1, gamma=1, kernel=rbf;, score=0.930 total time=   3.0s\n"},"28":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ..........C=1, gamma=1, kernel=rbf;, score=0.933 total time=   3.1s\n"},"29":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ..........C=1, gamma=1, kernel=rbf;, score=0.945 total time=   3.1s\n"},"3":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ........C=0.1, gamma=1, kernel=rbf;, score=0.554 total time=   3.3s\n"},"30":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ..........C=1, gamma=1, kernel=rbf;, score=0.934 total time=   3.4s\n"},"31":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ........C=1, gamma=0.1, kernel=rbf;, score=0.945 total time=   1.7s\n"},"32":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ........C=1, gamma=0.1, kernel=rbf;, score=0.934 total time=   1.6s\n"},"33":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ........C=1, gamma=0.1, kernel=rbf;, score=0.942 total time=   1.7s\n"},"34":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ........C=1, gamma=0.1, kernel=rbf;, score=0.930 total time=   1.6s\n"},"35":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ........C=1, gamma=0.1, kernel=rbf;, score=0.936 total time=   1.9s\n"},"36":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END .......C=1, gamma=0.01, kernel=rbf;, score=0.877 total time=   1.1s\n"},"37":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END .......C=1, gamma=0.01, kernel=rbf;, score=0.903 total time=   1.0s\n"},"38":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END .......C=1, gamma=0.01, kernel=rbf;, score=0.896 total time=   1.5s\n"},"39":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END .......C=1, gamma=0.01, kernel=rbf;, score=0.875 total time=   1.0s\n"},"4":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ........C=0.1, gamma=1, kernel=rbf;, score=0.564 total time=   2.6s\n"},"40":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END .......C=1, gamma=0.01, kernel=rbf;, score=0.886 total time=   1.7s\n"},"41":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ......C=1, gamma=0.001, kernel=rbf;, score=0.810 total time=   1.3s\n"},"42":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ......C=1, gamma=0.001, kernel=rbf;, score=0.811 total time=   1.5s\n"},"43":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ......C=1, gamma=0.001, kernel=rbf;, score=0.819 total time=   1.2s\n"},"44":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ......C=1, gamma=0.001, kernel=rbf;, score=0.792 total time=   1.1s\n"},"45":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ......C=1, gamma=0.001, kernel=rbf;, score=0.805 total time=   1.3s\n"},"46":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END .....C=1, gamma=0.0001, kernel=rbf;, score=0.774 total time=   1.3s\n"},"47":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END .....C=1, gamma=0.0001, kernel=rbf;, score=0.773 total time=   1.3s\n"},"48":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END .....C=1, gamma=0.0001, kernel=rbf;, score=0.780 total time=   1.3s\n"},"49":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END .....C=1, gamma=0.0001, kernel=rbf;, score=0.756 total time=   1.2s\n"},"5":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ........C=0.1, gamma=1, kernel=rbf;, score=0.560 total time=   2.8s\n"},"50":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END .....C=1, gamma=0.0001, kernel=rbf;, score=0.771 total time=   1.2s\n"},"51":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END .........C=10, gamma=1, kernel=rbf;, score=0.939 total time=   3.1s\n"},"52":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END .........C=10, gamma=1, kernel=rbf;, score=0.936 total time=   2.9s\n"},"53":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END .........C=10, gamma=1, kernel=rbf;, score=0.941 total time=   2.9s\n"},"54":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END .........C=10, gamma=1, kernel=rbf;, score=0.950 total time=   2.9s\n"},"55":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END .........C=10, gamma=1, kernel=rbf;, score=0.942 total time=   2.9s\n"},"56":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END .......C=10, gamma=0.1, kernel=rbf;, score=0.952 total time=   1.5s\n"},"57":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END .......C=10, gamma=0.1, kernel=rbf;, score=0.942 total time=   1.5s\n"},"58":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END .......C=10, gamma=0.1, kernel=rbf;, score=0.961 total time=   1.5s\n"},"59":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END .......C=10, gamma=0.1, kernel=rbf;, score=0.945 total time=   1.6s\n"},"6":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ......C=0.1, gamma=0.1, kernel=rbf;, score=0.889 total time=   2.1s\n"},"60":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END .......C=10, gamma=0.1, kernel=rbf;, score=0.954 total time=   1.6s\n"},"61":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ......C=10, gamma=0.01, kernel=rbf;, score=0.917 total time=   0.8s\n"},"62":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ......C=10, gamma=0.01, kernel=rbf;, score=0.933 total time=   1.0s\n"},"63":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ......C=10, gamma=0.01, kernel=rbf;, score=0.936 total time=   0.9s\n"},"64":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ......C=10, gamma=0.01, kernel=rbf;, score=0.922 total time=   0.8s\n"},"65":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ......C=10, gamma=0.01, kernel=rbf;, score=0.934 total time=   1.0s\n"},"66":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END .....C=10, gamma=0.001, kernel=rbf;, score=0.833 total time=   1.1s\n"},"67":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END .....C=10, gamma=0.001, kernel=rbf;, score=0.859 total time=   1.2s\n"},"68":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END .....C=10, gamma=0.001, kernel=rbf;, score=0.848 total time=   1.3s\n"},"69":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END .....C=10, gamma=0.001, kernel=rbf;, score=0.837 total time=   1.3s\n"},"7":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ......C=0.1, gamma=0.1, kernel=rbf;, score=0.883 total time=   2.2s\n"},"70":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END .....C=10, gamma=0.001, kernel=rbf;, score=0.857 total time=   1.2s\n"},"71":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ....C=10, gamma=0.0001, kernel=rbf;, score=0.792 total time=   1.3s\n"},"72":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ....C=10, gamma=0.0001, kernel=rbf;, score=0.789 total time=   1.3s\n"},"73":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ....C=10, gamma=0.0001, kernel=rbf;, score=0.790 total time=   1.5s\n"},"74":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ....C=10, gamma=0.0001, kernel=rbf;, score=0.773 total time=   1.3s\n"},"75":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ....C=10, gamma=0.0001, kernel=rbf;, score=0.789 total time=   1.3s\n"},"76":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ........C=100, gamma=1, kernel=rbf;, score=0.939 total time=   3.3s\n"},"77":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ........C=100, gamma=1, kernel=rbf;, score=0.936 total time=   2.9s\n"},"78":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ........C=100, gamma=1, kernel=rbf;, score=0.941 total time=   3.2s\n"},"79":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ........C=100, gamma=1, kernel=rbf;, score=0.948 total time=   3.0s\n"},"8":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ......C=0.1, gamma=0.1, kernel=rbf;, score=0.898 total time=   2.1s\n"},"80":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ........C=100, gamma=1, kernel=rbf;, score=0.942 total time=   3.2s\n"},"81":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ......C=100, gamma=0.1, kernel=rbf;, score=0.947 total time=   1.4s\n"},"82":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ......C=100, gamma=0.1, kernel=rbf;, score=0.945 total time=   1.7s\n"},"83":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ......C=100, gamma=0.1, kernel=rbf;, score=0.951 total time=   1.4s\n"},"84":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ......C=100, gamma=0.1, kernel=rbf;, score=0.939 total time=   1.4s\n"},"85":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ......C=100, gamma=0.1, kernel=rbf;, score=0.954 total time=   1.4s\n"},"86":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END .....C=100, gamma=0.01, kernel=rbf;, score=0.939 total time=   1.3s\n"},"87":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END .....C=100, gamma=0.01, kernel=rbf;, score=0.947 total time=   3.1s\n"},"88":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END .....C=100, gamma=0.01, kernel=rbf;, score=0.955 total time=   3.7s\n"},"89":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END .....C=100, gamma=0.01, kernel=rbf;, score=0.938 total time=   3.3s\n"},"9":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ......C=0.1, gamma=0.1, kernel=rbf;, score=0.891 total time=   2.2s\n"},"90":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END .....C=100, gamma=0.01, kernel=rbf;, score=0.952 total time=   3.1s\n"},"91":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ....C=100, gamma=0.001, kernel=rbf;, score=0.864 total time=   3.7s\n"},"92":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ....C=100, gamma=0.001, kernel=rbf;, score=0.889 total time=   3.9s\n"},"93":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ....C=100, gamma=0.001, kernel=rbf;, score=0.883 total time=   4.0s\n"},"94":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ....C=100, gamma=0.001, kernel=rbf;, score=0.861 total time=   3.9s\n"},"95":{"name":"stdout","output_type":"stream","text":"[CV 5/5] END ....C=100, gamma=0.001, kernel=rbf;, score=0.891 total time=   4.0s\n"},"96":{"name":"stdout","output_type":"stream","text":"[CV 1/5] END ...C=100, gamma=0.0001, kernel=rbf;, score=0.814 total time=   4.0s\n"},"97":{"name":"stdout","output_type":"stream","text":"[CV 2/5] END ...C=100, gamma=0.0001, kernel=rbf;, score=0.822 total time=   3.5s\n"},"98":{"name":"stdout","output_type":"stream","text":"[CV 3/5] END ...C=100, gamma=0.0001, kernel=rbf;, score=0.831 total time=   4.0s\n"},"99":{"name":"stdout","output_type":"stream","text":"[CV 4/5] END ...C=100, gamma=0.0001, kernel=rbf;, score=0.798 total time=   3.3s\n"}},"pos":39,"type":"cell"}
{"cell_type":"code","exec_count":85,"id":"71beb7","input":"\n# print best parameter after tuning\nprint(grid.best_params_)\n \n# print how our model looks after hyper-parameter tuning\nprint(grid.best_estimator_)\n\nprint(grid.best_score_)","output":{"0":{"name":"stdout","output_type":"stream","text":"{'C': 10, 'gamma': 0.1, 'kernel': 'rbf'}\nSVC(C=10, gamma=0.1)\n0.9507575757575758\n"}},"pos":40,"type":"cell"}
{"cell_type":"code","exec_count":86,"id":"f96349","input":"from sklearn.metrics import classification_report, confusion_matrix\ngrid_predictions = grid.predict(x_test2)\n \n# print classification report\nprint(classification_report(y_test2, grid_predictions))","output":{"0":{"name":"stdout","output_type":"stream","text":"              precision    recall  f1-score   support\n\n           0       0.56      0.92      0.69       823\n           1       0.77      0.27      0.40       823\n\n    accuracy                           0.59      1646\n   macro avg       0.66      0.59      0.55      1646\nweighted avg       0.66      0.59      0.55      1646\n\n"}},"pos":41,"type":"cell"}
{"cell_type":"code","exec_count":9,"id":"c18bf6","input":"hd = pd.read_csv(\"./healthcare-dataset-stroke-data.csv\")\nhd.drop('id',inplace=True,axis=1)\nhd.dropna(inplace=True)\nhd.reset_index(drop=True, inplace=False)\nhd.drop([466, 544, 928, 1559, 2128, 2764, 2840, 3825, 4188, 4209, 4838, 270, 358])\nhd[\"heart_disease\"]=hd[\"heart_disease\"].replace([1],15)\nhd[\"heart_disease\"]=hd[\"heart_disease\"].replace([0],6)\nbmiAgeSexStrokePlot = px.scatter_3d(hd,y=hd[\"avg_glucose_level\"],x=hd[\"age\"], z=hd[\"bmi\"], symbol=\"ever_married\",labels=dict(stroke=\"Number of Strokes\",age=\"Age\",gender=\"Sex\", bmi=\"BMI\", heart_disease=\"If Heart Disease Present\", avg_glucose_level=\"Average Glucose Level\",smoking_status=\"If Smoke\"),color=\"stroke\",opacity=0.8,size=\"heart_disease\",size_max=20)\nbmiAgeSexStrokePlot.update_yaxes(tick0=1.0, dtick=1.0)\n#bmiAgeSexStrokePlot.update_traces(marker_size = 2.5)\nbmiAgeSexStrokePlot.update_xaxes(tick0=1, dtick=10)\nbmiAgeSexStrokePlot.update_layout(margin=dict(l=40, r=40, b=40, t=40))\n#Multidimensional plot that depicts most of the variables with the stats of the given person including marriage status.\n#Younger people typically have a lower glucose level\n#Higher glucose level, higher chance to get a stroke\n#Older, higher chance\n#Higher BMI, higher chance\n#Females typically have a lower glucose level","output":{"0":{"data":{"iframe":"6fad1aa3c3d85ea329fdc9daeab5598187ba4f7a"},"exec_count":9,"output_type":"execute_result"}},"pos":12,"scrolled":true,"type":"cell"}
{"cell_type":"markdown","id":"3aaa1e","input":"### Dummy Vars\n\n","pos":17,"type":"cell"}
{"cell_type":"markdown","id":"5d65ac","input":"## EDA - Exploratory Data Analysis\n\n","pos":5,"type":"cell"}
{"cell_type":"markdown","id":"63c319","input":"### Support Vector Machine\n\n","pos":14,"type":"cell"}
{"cell_type":"markdown","id":"e93a24","input":"The older you are, the more likely you are to have a stroke. The higher you average glucose level is, the higher the stroke risk becomes. The higher your BMI is, the more likely you ate to have a stroke\n\nThe most dangerous combination is a high glucose level, and old age\n\nThe only data point that does not have any direct relation to strokes is age, although it does raise the chance for a person to get a stroke, when they are older\n","pos":11,"type":"cell"}
{"id":0,"time":1657295856473,"type":"user"}
{"last_load":1657290234607,"type":"file"}